
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model reports
 * 
 */
export type reports = $Result.DefaultSelection<Prisma.$reportsPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model locations
 * 
 */
export type locations = $Result.DefaultSelection<Prisma.$locationsPayload>
/**
 * Model responsibles
 * 
 */
export type responsibles = $Result.DefaultSelection<Prisma.$responsiblesPayload>
/**
 * Model calendar_events
 * 
 */
export type calendar_events = $Result.DefaultSelection<Prisma.$calendar_eventsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const reports_status: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type reports_status = (typeof reports_status)[keyof typeof reports_status]


export const users_role: {
  USER: 'USER',
  REPAIR_TECHNICIAN: 'REPAIR_TECHNICIAN',
  LEAD_REPAIR_TECHNICIAN: 'LEAD_REPAIR_TECHNICIAN',
  IT: 'IT',
  ADMIN: 'ADMIN'
};

export type users_role = (typeof users_role)[keyof typeof users_role]

}

export type reports_status = $Enums.reports_status

export const reports_status: typeof $Enums.reports_status

export type users_role = $Enums.users_role

export const users_role: typeof $Enums.users_role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Reports
 * const reports = await prisma.reports.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Reports
   * const reports = await prisma.reports.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.reports`: Exposes CRUD operations for the **reports** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.reports.findMany()
    * ```
    */
  get reports(): Prisma.reportsDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.locations`: Exposes CRUD operations for the **locations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.locations.findMany()
    * ```
    */
  get locations(): Prisma.locationsDelegate<ExtArgs>;

  /**
   * `prisma.responsibles`: Exposes CRUD operations for the **responsibles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Responsibles
    * const responsibles = await prisma.responsibles.findMany()
    * ```
    */
  get responsibles(): Prisma.responsiblesDelegate<ExtArgs>;

  /**
   * `prisma.calendar_events`: Exposes CRUD operations for the **calendar_events** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Calendar_events
    * const calendar_events = await prisma.calendar_events.findMany()
    * ```
    */
  get calendar_events(): Prisma.calendar_eventsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    reports: 'reports',
    users: 'users',
    locations: 'locations',
    responsibles: 'responsibles',
    calendar_events: 'calendar_events'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "reports" | "users" | "locations" | "responsibles" | "calendar_events"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      reports: {
        payload: Prisma.$reportsPayload<ExtArgs>
        fields: Prisma.reportsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reportsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reportsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>
          }
          findFirst: {
            args: Prisma.reportsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reportsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>
          }
          findMany: {
            args: Prisma.reportsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>[]
          }
          create: {
            args: Prisma.reportsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>
          }
          createMany: {
            args: Prisma.reportsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.reportsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>
          }
          update: {
            args: Prisma.reportsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>
          }
          deleteMany: {
            args: Prisma.reportsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reportsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.reportsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportsPayload>
          }
          aggregate: {
            args: Prisma.ReportsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReports>
          }
          groupBy: {
            args: Prisma.reportsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportsGroupByOutputType>[]
          }
          count: {
            args: Prisma.reportsCountArgs<ExtArgs>
            result: $Utils.Optional<ReportsCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      locations: {
        payload: Prisma.$locationsPayload<ExtArgs>
        fields: Prisma.locationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.locationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.locationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationsPayload>
          }
          findFirst: {
            args: Prisma.locationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.locationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationsPayload>
          }
          findMany: {
            args: Prisma.locationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationsPayload>[]
          }
          create: {
            args: Prisma.locationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationsPayload>
          }
          createMany: {
            args: Prisma.locationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.locationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationsPayload>
          }
          update: {
            args: Prisma.locationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationsPayload>
          }
          deleteMany: {
            args: Prisma.locationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.locationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.locationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationsPayload>
          }
          aggregate: {
            args: Prisma.LocationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocations>
          }
          groupBy: {
            args: Prisma.locationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.locationsCountArgs<ExtArgs>
            result: $Utils.Optional<LocationsCountAggregateOutputType> | number
          }
        }
      }
      responsibles: {
        payload: Prisma.$responsiblesPayload<ExtArgs>
        fields: Prisma.responsiblesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.responsiblesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$responsiblesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.responsiblesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$responsiblesPayload>
          }
          findFirst: {
            args: Prisma.responsiblesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$responsiblesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.responsiblesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$responsiblesPayload>
          }
          findMany: {
            args: Prisma.responsiblesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$responsiblesPayload>[]
          }
          create: {
            args: Prisma.responsiblesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$responsiblesPayload>
          }
          createMany: {
            args: Prisma.responsiblesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.responsiblesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$responsiblesPayload>
          }
          update: {
            args: Prisma.responsiblesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$responsiblesPayload>
          }
          deleteMany: {
            args: Prisma.responsiblesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.responsiblesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.responsiblesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$responsiblesPayload>
          }
          aggregate: {
            args: Prisma.ResponsiblesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResponsibles>
          }
          groupBy: {
            args: Prisma.responsiblesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResponsiblesGroupByOutputType>[]
          }
          count: {
            args: Prisma.responsiblesCountArgs<ExtArgs>
            result: $Utils.Optional<ResponsiblesCountAggregateOutputType> | number
          }
        }
      }
      calendar_events: {
        payload: Prisma.$calendar_eventsPayload<ExtArgs>
        fields: Prisma.calendar_eventsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.calendar_eventsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$calendar_eventsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.calendar_eventsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$calendar_eventsPayload>
          }
          findFirst: {
            args: Prisma.calendar_eventsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$calendar_eventsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.calendar_eventsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$calendar_eventsPayload>
          }
          findMany: {
            args: Prisma.calendar_eventsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$calendar_eventsPayload>[]
          }
          create: {
            args: Prisma.calendar_eventsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$calendar_eventsPayload>
          }
          createMany: {
            args: Prisma.calendar_eventsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.calendar_eventsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$calendar_eventsPayload>
          }
          update: {
            args: Prisma.calendar_eventsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$calendar_eventsPayload>
          }
          deleteMany: {
            args: Prisma.calendar_eventsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.calendar_eventsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.calendar_eventsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$calendar_eventsPayload>
          }
          aggregate: {
            args: Prisma.Calendar_eventsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCalendar_events>
          }
          groupBy: {
            args: Prisma.calendar_eventsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Calendar_eventsGroupByOutputType>[]
          }
          count: {
            args: Prisma.calendar_eventsCountArgs<ExtArgs>
            result: $Utils.Optional<Calendar_eventsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    reports: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | UsersCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportsWhereInput
  }


  /**
   * Count Type LocationsCountOutputType
   */

  export type LocationsCountOutputType = {
    reports: number
    calendarEvents: number
    users: number
  }

  export type LocationsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | LocationsCountOutputTypeCountReportsArgs
    calendarEvents?: boolean | LocationsCountOutputTypeCountCalendarEventsArgs
    users?: boolean | LocationsCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * LocationsCountOutputType without action
   */
  export type LocationsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationsCountOutputType
     */
    select?: LocationsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationsCountOutputType without action
   */
  export type LocationsCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportsWhereInput
  }

  /**
   * LocationsCountOutputType without action
   */
  export type LocationsCountOutputTypeCountCalendarEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: calendar_eventsWhereInput
  }

  /**
   * LocationsCountOutputType without action
   */
  export type LocationsCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
  }


  /**
   * Count Type ResponsiblesCountOutputType
   */

  export type ResponsiblesCountOutputType = {
    reports: number
  }

  export type ResponsiblesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | ResponsiblesCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * ResponsiblesCountOutputType without action
   */
  export type ResponsiblesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponsiblesCountOutputType
     */
    select?: ResponsiblesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ResponsiblesCountOutputType without action
   */
  export type ResponsiblesCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model reports
   */

  export type AggregateReports = {
    _count: ReportsCountAggregateOutputType | null
    _avg: ReportsAvgAggregateOutputType | null
    _sum: ReportsSumAggregateOutputType | null
    _min: ReportsMinAggregateOutputType | null
    _max: ReportsMaxAggregateOutputType | null
  }

  export type ReportsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    location_id: number | null
    responsible_id: number | null
  }

  export type ReportsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    location_id: number | null
    responsible_id: number | null
  }

  export type ReportsMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    location_id: number | null
    responsible_id: number | null
    title: string | null
    description: string | null
    status: $Enums.reports_status | null
    category: string | null
    imageUrl: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ReportsMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    location_id: number | null
    responsible_id: number | null
    title: string | null
    description: string | null
    status: $Enums.reports_status | null
    category: string | null
    imageUrl: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ReportsCountAggregateOutputType = {
    id: number
    user_id: number
    location_id: number
    responsible_id: number
    title: number
    description: number
    status: number
    category: number
    imageUrl: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ReportsAvgAggregateInputType = {
    id?: true
    user_id?: true
    location_id?: true
    responsible_id?: true
  }

  export type ReportsSumAggregateInputType = {
    id?: true
    user_id?: true
    location_id?: true
    responsible_id?: true
  }

  export type ReportsMinAggregateInputType = {
    id?: true
    user_id?: true
    location_id?: true
    responsible_id?: true
    title?: true
    description?: true
    status?: true
    category?: true
    imageUrl?: true
    created_at?: true
    updated_at?: true
  }

  export type ReportsMaxAggregateInputType = {
    id?: true
    user_id?: true
    location_id?: true
    responsible_id?: true
    title?: true
    description?: true
    status?: true
    category?: true
    imageUrl?: true
    created_at?: true
    updated_at?: true
  }

  export type ReportsCountAggregateInputType = {
    id?: true
    user_id?: true
    location_id?: true
    responsible_id?: true
    title?: true
    description?: true
    status?: true
    category?: true
    imageUrl?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ReportsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reports to aggregate.
     */
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reports
    **/
    _count?: true | ReportsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportsMaxAggregateInputType
  }

  export type GetReportsAggregateType<T extends ReportsAggregateArgs> = {
        [P in keyof T & keyof AggregateReports]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReports[P]>
      : GetScalarType<T[P], AggregateReports[P]>
  }




  export type reportsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportsWhereInput
    orderBy?: reportsOrderByWithAggregationInput | reportsOrderByWithAggregationInput[]
    by: ReportsScalarFieldEnum[] | ReportsScalarFieldEnum
    having?: reportsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportsCountAggregateInputType | true
    _avg?: ReportsAvgAggregateInputType
    _sum?: ReportsSumAggregateInputType
    _min?: ReportsMinAggregateInputType
    _max?: ReportsMaxAggregateInputType
  }

  export type ReportsGroupByOutputType = {
    id: number
    user_id: number
    location_id: number | null
    responsible_id: number | null
    title: string
    description: string
    status: $Enums.reports_status
    category: string | null
    imageUrl: string | null
    created_at: Date
    updated_at: Date
    _count: ReportsCountAggregateOutputType | null
    _avg: ReportsAvgAggregateOutputType | null
    _sum: ReportsSumAggregateOutputType | null
    _min: ReportsMinAggregateOutputType | null
    _max: ReportsMaxAggregateOutputType | null
  }

  type GetReportsGroupByPayload<T extends reportsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportsGroupByOutputType[P]>
            : GetScalarType<T[P], ReportsGroupByOutputType[P]>
        }
      >
    >


  export type reportsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    location_id?: boolean
    responsible_id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    category?: boolean
    imageUrl?: boolean
    created_at?: boolean
    updated_at?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
    location?: boolean | reports$locationArgs<ExtArgs>
    responsible?: boolean | reports$responsibleArgs<ExtArgs>
  }, ExtArgs["result"]["reports"]>


  export type reportsSelectScalar = {
    id?: boolean
    user_id?: boolean
    location_id?: boolean
    responsible_id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    category?: boolean
    imageUrl?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type reportsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
    location?: boolean | reports$locationArgs<ExtArgs>
    responsible?: boolean | reports$responsibleArgs<ExtArgs>
  }

  export type $reportsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "reports"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
      location: Prisma.$locationsPayload<ExtArgs> | null
      responsible: Prisma.$responsiblesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      location_id: number | null
      responsible_id: number | null
      title: string
      description: string
      status: $Enums.reports_status
      category: string | null
      imageUrl: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["reports"]>
    composites: {}
  }

  type reportsGetPayload<S extends boolean | null | undefined | reportsDefaultArgs> = $Result.GetResult<Prisma.$reportsPayload, S>

  type reportsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<reportsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportsCountAggregateInputType | true
    }

  export interface reportsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reports'], meta: { name: 'reports' } }
    /**
     * Find zero or one Reports that matches the filter.
     * @param {reportsFindUniqueArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reportsFindUniqueArgs>(args: SelectSubset<T, reportsFindUniqueArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reports that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {reportsFindUniqueOrThrowArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reportsFindUniqueOrThrowArgs>(args: SelectSubset<T, reportsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsFindFirstArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reportsFindFirstArgs>(args?: SelectSubset<T, reportsFindFirstArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reports that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsFindFirstOrThrowArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reportsFindFirstOrThrowArgs>(args?: SelectSubset<T, reportsFindFirstOrThrowArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.reports.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.reports.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportsWithIdOnly = await prisma.reports.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends reportsFindManyArgs>(args?: SelectSubset<T, reportsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reports.
     * @param {reportsCreateArgs} args - Arguments to create a Reports.
     * @example
     * // Create one Reports
     * const Reports = await prisma.reports.create({
     *   data: {
     *     // ... data to create a Reports
     *   }
     * })
     * 
     */
    create<T extends reportsCreateArgs>(args: SelectSubset<T, reportsCreateArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reports.
     * @param {reportsCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const reports = await prisma.reports.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reportsCreateManyArgs>(args?: SelectSubset<T, reportsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reports.
     * @param {reportsDeleteArgs} args - Arguments to delete one Reports.
     * @example
     * // Delete one Reports
     * const Reports = await prisma.reports.delete({
     *   where: {
     *     // ... filter to delete one Reports
     *   }
     * })
     * 
     */
    delete<T extends reportsDeleteArgs>(args: SelectSubset<T, reportsDeleteArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reports.
     * @param {reportsUpdateArgs} args - Arguments to update one Reports.
     * @example
     * // Update one Reports
     * const reports = await prisma.reports.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reportsUpdateArgs>(args: SelectSubset<T, reportsUpdateArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reports.
     * @param {reportsDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.reports.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reportsDeleteManyArgs>(args?: SelectSubset<T, reportsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const reports = await prisma.reports.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reportsUpdateManyArgs>(args: SelectSubset<T, reportsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reports.
     * @param {reportsUpsertArgs} args - Arguments to update or create a Reports.
     * @example
     * // Update or create a Reports
     * const reports = await prisma.reports.upsert({
     *   create: {
     *     // ... data to create a Reports
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reports we want to update
     *   }
     * })
     */
    upsert<T extends reportsUpsertArgs>(args: SelectSubset<T, reportsUpsertArgs<ExtArgs>>): Prisma__reportsClient<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.reports.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends reportsCountArgs>(
      args?: Subset<T, reportsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportsAggregateArgs>(args: Subset<T, ReportsAggregateArgs>): Prisma.PrismaPromise<GetReportsAggregateType<T>>

    /**
     * Group by Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reportsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reportsGroupByArgs['orderBy'] }
        : { orderBy?: reportsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reportsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the reports model
   */
  readonly fields: reportsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for reports.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reportsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    location<T extends reports$locationArgs<ExtArgs> = {}>(args?: Subset<T, reports$locationArgs<ExtArgs>>): Prisma__locationsClient<$Result.GetResult<Prisma.$locationsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    responsible<T extends reports$responsibleArgs<ExtArgs> = {}>(args?: Subset<T, reports$responsibleArgs<ExtArgs>>): Prisma__responsiblesClient<$Result.GetResult<Prisma.$responsiblesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the reports model
   */ 
  interface reportsFieldRefs {
    readonly id: FieldRef<"reports", 'Int'>
    readonly user_id: FieldRef<"reports", 'Int'>
    readonly location_id: FieldRef<"reports", 'Int'>
    readonly responsible_id: FieldRef<"reports", 'Int'>
    readonly title: FieldRef<"reports", 'String'>
    readonly description: FieldRef<"reports", 'String'>
    readonly status: FieldRef<"reports", 'reports_status'>
    readonly category: FieldRef<"reports", 'String'>
    readonly imageUrl: FieldRef<"reports", 'String'>
    readonly created_at: FieldRef<"reports", 'DateTime'>
    readonly updated_at: FieldRef<"reports", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * reports findUnique
   */
  export type reportsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * Filter, which reports to fetch.
     */
    where: reportsWhereUniqueInput
  }

  /**
   * reports findUniqueOrThrow
   */
  export type reportsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * Filter, which reports to fetch.
     */
    where: reportsWhereUniqueInput
  }

  /**
   * reports findFirst
   */
  export type reportsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * Filter, which reports to fetch.
     */
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reports.
     */
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reports.
     */
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * reports findFirstOrThrow
   */
  export type reportsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * Filter, which reports to fetch.
     */
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reports.
     */
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reports.
     */
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * reports findMany
   */
  export type reportsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * Filter, which reports to fetch.
     */
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reports.
     */
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * reports create
   */
  export type reportsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * The data needed to create a reports.
     */
    data: XOR<reportsCreateInput, reportsUncheckedCreateInput>
  }

  /**
   * reports createMany
   */
  export type reportsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reports.
     */
    data: reportsCreateManyInput | reportsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * reports update
   */
  export type reportsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * The data needed to update a reports.
     */
    data: XOR<reportsUpdateInput, reportsUncheckedUpdateInput>
    /**
     * Choose, which reports to update.
     */
    where: reportsWhereUniqueInput
  }

  /**
   * reports updateMany
   */
  export type reportsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reports.
     */
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyInput>
    /**
     * Filter which reports to update
     */
    where?: reportsWhereInput
  }

  /**
   * reports upsert
   */
  export type reportsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * The filter to search for the reports to update in case it exists.
     */
    where: reportsWhereUniqueInput
    /**
     * In case the reports found by the `where` argument doesn't exist, create a new reports with this data.
     */
    create: XOR<reportsCreateInput, reportsUncheckedCreateInput>
    /**
     * In case the reports was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reportsUpdateInput, reportsUncheckedUpdateInput>
  }

  /**
   * reports delete
   */
  export type reportsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    /**
     * Filter which reports to delete.
     */
    where: reportsWhereUniqueInput
  }

  /**
   * reports deleteMany
   */
  export type reportsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reports to delete
     */
    where?: reportsWhereInput
  }

  /**
   * reports.location
   */
  export type reports$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the locations
     */
    select?: locationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationsInclude<ExtArgs> | null
    where?: locationsWhereInput
  }

  /**
   * reports.responsible
   */
  export type reports$responsibleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responsibles
     */
    select?: responsiblesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: responsiblesInclude<ExtArgs> | null
    where?: responsiblesWhereInput
  }

  /**
   * reports without action
   */
  export type reportsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    location_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    location_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    firstname: string | null
    lastname: string | null
    phone: string | null
    role: $Enums.users_role | null
    location_id: number | null
    created_at: Date | null
    updated_at: Date | null
    resettoken: string | null
    resettokenExpire: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    firstname: string | null
    lastname: string | null
    phone: string | null
    role: $Enums.users_role | null
    location_id: number | null
    created_at: Date | null
    updated_at: Date | null
    resettoken: string | null
    resettokenExpire: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstname: number
    lastname: number
    phone: number
    role: number
    location_id: number
    created_at: number
    updated_at: number
    resettoken: number
    resettokenExpire: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    location_id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    location_id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstname?: true
    lastname?: true
    phone?: true
    role?: true
    location_id?: true
    created_at?: true
    updated_at?: true
    resettoken?: true
    resettokenExpire?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstname?: true
    lastname?: true
    phone?: true
    role?: true
    location_id?: true
    created_at?: true
    updated_at?: true
    resettoken?: true
    resettokenExpire?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstname?: true
    lastname?: true
    phone?: true
    role?: true
    location_id?: true
    created_at?: true
    updated_at?: true
    resettoken?: true
    resettokenExpire?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    email: string
    password: string
    firstname: string | null
    lastname: string | null
    phone: string | null
    role: $Enums.users_role
    location_id: number | null
    created_at: Date
    updated_at: Date
    resettoken: string | null
    resettokenExpire: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstname?: boolean
    lastname?: boolean
    phone?: boolean
    role?: boolean
    location_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    resettoken?: boolean
    resettokenExpire?: boolean
    location?: boolean | users$locationArgs<ExtArgs>
    reports?: boolean | users$reportsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>


  export type usersSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstname?: boolean
    lastname?: boolean
    phone?: boolean
    role?: boolean
    location_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    resettoken?: boolean
    resettokenExpire?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | users$locationArgs<ExtArgs>
    reports?: boolean | users$reportsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      location: Prisma.$locationsPayload<ExtArgs> | null
      reports: Prisma.$reportsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      firstname: string | null
      lastname: string | null
      phone: string | null
      role: $Enums.users_role
      location_id: number | null
      created_at: Date
      updated_at: Date
      resettoken: string | null
      resettokenExpire: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends users$locationArgs<ExtArgs> = {}>(args?: Subset<T, users$locationArgs<ExtArgs>>): Prisma__locationsClient<$Result.GetResult<Prisma.$locationsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    reports<T extends users$reportsArgs<ExtArgs> = {}>(args?: Subset<T, users$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly firstname: FieldRef<"users", 'String'>
    readonly lastname: FieldRef<"users", 'String'>
    readonly phone: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'users_role'>
    readonly location_id: FieldRef<"users", 'Int'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly updated_at: FieldRef<"users", 'DateTime'>
    readonly resettoken: FieldRef<"users", 'String'>
    readonly resettokenExpire: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users.location
   */
  export type users$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the locations
     */
    select?: locationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationsInclude<ExtArgs> | null
    where?: locationsWhereInput
  }

  /**
   * users.reports
   */
  export type users$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    where?: reportsWhereInput
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    cursor?: reportsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model locations
   */

  export type AggregateLocations = {
    _count: LocationsCountAggregateOutputType | null
    _avg: LocationsAvgAggregateOutputType | null
    _sum: LocationsSumAggregateOutputType | null
    _min: LocationsMinAggregateOutputType | null
    _max: LocationsMaxAggregateOutputType | null
  }

  export type LocationsAvgAggregateOutputType = {
    id: number | null
  }

  export type LocationsSumAggregateOutputType = {
    id: number | null
  }

  export type LocationsMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LocationsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LocationsCountAggregateOutputType = {
    id: number
    name: number
    address: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LocationsAvgAggregateInputType = {
    id?: true
  }

  export type LocationsSumAggregateInputType = {
    id?: true
  }

  export type LocationsMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    created_at?: true
    updated_at?: true
  }

  export type LocationsMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    created_at?: true
    updated_at?: true
  }

  export type LocationsCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LocationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which locations to aggregate.
     */
    where?: locationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of locations to fetch.
     */
    orderBy?: locationsOrderByWithRelationInput | locationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: locationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned locations
    **/
    _count?: true | LocationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationsMaxAggregateInputType
  }

  export type GetLocationsAggregateType<T extends LocationsAggregateArgs> = {
        [P in keyof T & keyof AggregateLocations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocations[P]>
      : GetScalarType<T[P], AggregateLocations[P]>
  }




  export type locationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: locationsWhereInput
    orderBy?: locationsOrderByWithAggregationInput | locationsOrderByWithAggregationInput[]
    by: LocationsScalarFieldEnum[] | LocationsScalarFieldEnum
    having?: locationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationsCountAggregateInputType | true
    _avg?: LocationsAvgAggregateInputType
    _sum?: LocationsSumAggregateInputType
    _min?: LocationsMinAggregateInputType
    _max?: LocationsMaxAggregateInputType
  }

  export type LocationsGroupByOutputType = {
    id: number
    name: string
    address: string
    created_at: Date
    updated_at: Date
    _count: LocationsCountAggregateOutputType | null
    _avg: LocationsAvgAggregateOutputType | null
    _sum: LocationsSumAggregateOutputType | null
    _min: LocationsMinAggregateOutputType | null
    _max: LocationsMaxAggregateOutputType | null
  }

  type GetLocationsGroupByPayload<T extends locationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationsGroupByOutputType[P]>
            : GetScalarType<T[P], LocationsGroupByOutputType[P]>
        }
      >
    >


  export type locationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    created_at?: boolean
    updated_at?: boolean
    reports?: boolean | locations$reportsArgs<ExtArgs>
    calendarEvents?: boolean | locations$calendarEventsArgs<ExtArgs>
    users?: boolean | locations$usersArgs<ExtArgs>
    _count?: boolean | LocationsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locations"]>


  export type locationsSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type locationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | locations$reportsArgs<ExtArgs>
    calendarEvents?: boolean | locations$calendarEventsArgs<ExtArgs>
    users?: boolean | locations$usersArgs<ExtArgs>
    _count?: boolean | LocationsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $locationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "locations"
    objects: {
      reports: Prisma.$reportsPayload<ExtArgs>[]
      calendarEvents: Prisma.$calendar_eventsPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["locations"]>
    composites: {}
  }

  type locationsGetPayload<S extends boolean | null | undefined | locationsDefaultArgs> = $Result.GetResult<Prisma.$locationsPayload, S>

  type locationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<locationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationsCountAggregateInputType | true
    }

  export interface locationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['locations'], meta: { name: 'locations' } }
    /**
     * Find zero or one Locations that matches the filter.
     * @param {locationsFindUniqueArgs} args - Arguments to find a Locations
     * @example
     * // Get one Locations
     * const locations = await prisma.locations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends locationsFindUniqueArgs>(args: SelectSubset<T, locationsFindUniqueArgs<ExtArgs>>): Prisma__locationsClient<$Result.GetResult<Prisma.$locationsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Locations that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {locationsFindUniqueOrThrowArgs} args - Arguments to find a Locations
     * @example
     * // Get one Locations
     * const locations = await prisma.locations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends locationsFindUniqueOrThrowArgs>(args: SelectSubset<T, locationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__locationsClient<$Result.GetResult<Prisma.$locationsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationsFindFirstArgs} args - Arguments to find a Locations
     * @example
     * // Get one Locations
     * const locations = await prisma.locations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends locationsFindFirstArgs>(args?: SelectSubset<T, locationsFindFirstArgs<ExtArgs>>): Prisma__locationsClient<$Result.GetResult<Prisma.$locationsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Locations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationsFindFirstOrThrowArgs} args - Arguments to find a Locations
     * @example
     * // Get one Locations
     * const locations = await prisma.locations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends locationsFindFirstOrThrowArgs>(args?: SelectSubset<T, locationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__locationsClient<$Result.GetResult<Prisma.$locationsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.locations.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.locations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationsWithIdOnly = await prisma.locations.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends locationsFindManyArgs>(args?: SelectSubset<T, locationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$locationsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Locations.
     * @param {locationsCreateArgs} args - Arguments to create a Locations.
     * @example
     * // Create one Locations
     * const Locations = await prisma.locations.create({
     *   data: {
     *     // ... data to create a Locations
     *   }
     * })
     * 
     */
    create<T extends locationsCreateArgs>(args: SelectSubset<T, locationsCreateArgs<ExtArgs>>): Prisma__locationsClient<$Result.GetResult<Prisma.$locationsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Locations.
     * @param {locationsCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const locations = await prisma.locations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends locationsCreateManyArgs>(args?: SelectSubset<T, locationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Locations.
     * @param {locationsDeleteArgs} args - Arguments to delete one Locations.
     * @example
     * // Delete one Locations
     * const Locations = await prisma.locations.delete({
     *   where: {
     *     // ... filter to delete one Locations
     *   }
     * })
     * 
     */
    delete<T extends locationsDeleteArgs>(args: SelectSubset<T, locationsDeleteArgs<ExtArgs>>): Prisma__locationsClient<$Result.GetResult<Prisma.$locationsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Locations.
     * @param {locationsUpdateArgs} args - Arguments to update one Locations.
     * @example
     * // Update one Locations
     * const locations = await prisma.locations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends locationsUpdateArgs>(args: SelectSubset<T, locationsUpdateArgs<ExtArgs>>): Prisma__locationsClient<$Result.GetResult<Prisma.$locationsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {locationsDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.locations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends locationsDeleteManyArgs>(args?: SelectSubset<T, locationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const locations = await prisma.locations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends locationsUpdateManyArgs>(args: SelectSubset<T, locationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Locations.
     * @param {locationsUpsertArgs} args - Arguments to update or create a Locations.
     * @example
     * // Update or create a Locations
     * const locations = await prisma.locations.upsert({
     *   create: {
     *     // ... data to create a Locations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Locations we want to update
     *   }
     * })
     */
    upsert<T extends locationsUpsertArgs>(args: SelectSubset<T, locationsUpsertArgs<ExtArgs>>): Prisma__locationsClient<$Result.GetResult<Prisma.$locationsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationsCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.locations.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends locationsCountArgs>(
      args?: Subset<T, locationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationsAggregateArgs>(args: Subset<T, LocationsAggregateArgs>): Prisma.PrismaPromise<GetLocationsAggregateType<T>>

    /**
     * Group by Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends locationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: locationsGroupByArgs['orderBy'] }
        : { orderBy?: locationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, locationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the locations model
   */
  readonly fields: locationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for locations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__locationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reports<T extends locations$reportsArgs<ExtArgs> = {}>(args?: Subset<T, locations$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findMany"> | Null>
    calendarEvents<T extends locations$calendarEventsArgs<ExtArgs> = {}>(args?: Subset<T, locations$calendarEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$calendar_eventsPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends locations$usersArgs<ExtArgs> = {}>(args?: Subset<T, locations$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the locations model
   */ 
  interface locationsFieldRefs {
    readonly id: FieldRef<"locations", 'Int'>
    readonly name: FieldRef<"locations", 'String'>
    readonly address: FieldRef<"locations", 'String'>
    readonly created_at: FieldRef<"locations", 'DateTime'>
    readonly updated_at: FieldRef<"locations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * locations findUnique
   */
  export type locationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the locations
     */
    select?: locationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationsInclude<ExtArgs> | null
    /**
     * Filter, which locations to fetch.
     */
    where: locationsWhereUniqueInput
  }

  /**
   * locations findUniqueOrThrow
   */
  export type locationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the locations
     */
    select?: locationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationsInclude<ExtArgs> | null
    /**
     * Filter, which locations to fetch.
     */
    where: locationsWhereUniqueInput
  }

  /**
   * locations findFirst
   */
  export type locationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the locations
     */
    select?: locationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationsInclude<ExtArgs> | null
    /**
     * Filter, which locations to fetch.
     */
    where?: locationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of locations to fetch.
     */
    orderBy?: locationsOrderByWithRelationInput | locationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for locations.
     */
    cursor?: locationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of locations.
     */
    distinct?: LocationsScalarFieldEnum | LocationsScalarFieldEnum[]
  }

  /**
   * locations findFirstOrThrow
   */
  export type locationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the locations
     */
    select?: locationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationsInclude<ExtArgs> | null
    /**
     * Filter, which locations to fetch.
     */
    where?: locationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of locations to fetch.
     */
    orderBy?: locationsOrderByWithRelationInput | locationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for locations.
     */
    cursor?: locationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of locations.
     */
    distinct?: LocationsScalarFieldEnum | LocationsScalarFieldEnum[]
  }

  /**
   * locations findMany
   */
  export type locationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the locations
     */
    select?: locationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationsInclude<ExtArgs> | null
    /**
     * Filter, which locations to fetch.
     */
    where?: locationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of locations to fetch.
     */
    orderBy?: locationsOrderByWithRelationInput | locationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing locations.
     */
    cursor?: locationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` locations.
     */
    skip?: number
    distinct?: LocationsScalarFieldEnum | LocationsScalarFieldEnum[]
  }

  /**
   * locations create
   */
  export type locationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the locations
     */
    select?: locationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationsInclude<ExtArgs> | null
    /**
     * The data needed to create a locations.
     */
    data: XOR<locationsCreateInput, locationsUncheckedCreateInput>
  }

  /**
   * locations createMany
   */
  export type locationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many locations.
     */
    data: locationsCreateManyInput | locationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * locations update
   */
  export type locationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the locations
     */
    select?: locationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationsInclude<ExtArgs> | null
    /**
     * The data needed to update a locations.
     */
    data: XOR<locationsUpdateInput, locationsUncheckedUpdateInput>
    /**
     * Choose, which locations to update.
     */
    where: locationsWhereUniqueInput
  }

  /**
   * locations updateMany
   */
  export type locationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update locations.
     */
    data: XOR<locationsUpdateManyMutationInput, locationsUncheckedUpdateManyInput>
    /**
     * Filter which locations to update
     */
    where?: locationsWhereInput
  }

  /**
   * locations upsert
   */
  export type locationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the locations
     */
    select?: locationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationsInclude<ExtArgs> | null
    /**
     * The filter to search for the locations to update in case it exists.
     */
    where: locationsWhereUniqueInput
    /**
     * In case the locations found by the `where` argument doesn't exist, create a new locations with this data.
     */
    create: XOR<locationsCreateInput, locationsUncheckedCreateInput>
    /**
     * In case the locations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<locationsUpdateInput, locationsUncheckedUpdateInput>
  }

  /**
   * locations delete
   */
  export type locationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the locations
     */
    select?: locationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationsInclude<ExtArgs> | null
    /**
     * Filter which locations to delete.
     */
    where: locationsWhereUniqueInput
  }

  /**
   * locations deleteMany
   */
  export type locationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which locations to delete
     */
    where?: locationsWhereInput
  }

  /**
   * locations.reports
   */
  export type locations$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    where?: reportsWhereInput
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    cursor?: reportsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * locations.calendarEvents
   */
  export type locations$calendarEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calendar_events
     */
    select?: calendar_eventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: calendar_eventsInclude<ExtArgs> | null
    where?: calendar_eventsWhereInput
    orderBy?: calendar_eventsOrderByWithRelationInput | calendar_eventsOrderByWithRelationInput[]
    cursor?: calendar_eventsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Calendar_eventsScalarFieldEnum | Calendar_eventsScalarFieldEnum[]
  }

  /**
   * locations.users
   */
  export type locations$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * locations without action
   */
  export type locationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the locations
     */
    select?: locationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationsInclude<ExtArgs> | null
  }


  /**
   * Model responsibles
   */

  export type AggregateResponsibles = {
    _count: ResponsiblesCountAggregateOutputType | null
    _avg: ResponsiblesAvgAggregateOutputType | null
    _sum: ResponsiblesSumAggregateOutputType | null
    _min: ResponsiblesMinAggregateOutputType | null
    _max: ResponsiblesMaxAggregateOutputType | null
  }

  export type ResponsiblesAvgAggregateOutputType = {
    id: number | null
  }

  export type ResponsiblesSumAggregateOutputType = {
    id: number | null
  }

  export type ResponsiblesMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ResponsiblesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ResponsiblesCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ResponsiblesAvgAggregateInputType = {
    id?: true
  }

  export type ResponsiblesSumAggregateInputType = {
    id?: true
  }

  export type ResponsiblesMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    created_at?: true
    updated_at?: true
  }

  export type ResponsiblesMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    created_at?: true
    updated_at?: true
  }

  export type ResponsiblesCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ResponsiblesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which responsibles to aggregate.
     */
    where?: responsiblesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responsibles to fetch.
     */
    orderBy?: responsiblesOrderByWithRelationInput | responsiblesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: responsiblesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responsibles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responsibles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned responsibles
    **/
    _count?: true | ResponsiblesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResponsiblesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResponsiblesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResponsiblesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResponsiblesMaxAggregateInputType
  }

  export type GetResponsiblesAggregateType<T extends ResponsiblesAggregateArgs> = {
        [P in keyof T & keyof AggregateResponsibles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResponsibles[P]>
      : GetScalarType<T[P], AggregateResponsibles[P]>
  }




  export type responsiblesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: responsiblesWhereInput
    orderBy?: responsiblesOrderByWithAggregationInput | responsiblesOrderByWithAggregationInput[]
    by: ResponsiblesScalarFieldEnum[] | ResponsiblesScalarFieldEnum
    having?: responsiblesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResponsiblesCountAggregateInputType | true
    _avg?: ResponsiblesAvgAggregateInputType
    _sum?: ResponsiblesSumAggregateInputType
    _min?: ResponsiblesMinAggregateInputType
    _max?: ResponsiblesMaxAggregateInputType
  }

  export type ResponsiblesGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string | null
    created_at: Date
    updated_at: Date
    _count: ResponsiblesCountAggregateOutputType | null
    _avg: ResponsiblesAvgAggregateOutputType | null
    _sum: ResponsiblesSumAggregateOutputType | null
    _min: ResponsiblesMinAggregateOutputType | null
    _max: ResponsiblesMaxAggregateOutputType | null
  }

  type GetResponsiblesGroupByPayload<T extends responsiblesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResponsiblesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResponsiblesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResponsiblesGroupByOutputType[P]>
            : GetScalarType<T[P], ResponsiblesGroupByOutputType[P]>
        }
      >
    >


  export type responsiblesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    created_at?: boolean
    updated_at?: boolean
    reports?: boolean | responsibles$reportsArgs<ExtArgs>
    _count?: boolean | ResponsiblesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["responsibles"]>


  export type responsiblesSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type responsiblesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | responsibles$reportsArgs<ExtArgs>
    _count?: boolean | ResponsiblesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $responsiblesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "responsibles"
    objects: {
      reports: Prisma.$reportsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["responsibles"]>
    composites: {}
  }

  type responsiblesGetPayload<S extends boolean | null | undefined | responsiblesDefaultArgs> = $Result.GetResult<Prisma.$responsiblesPayload, S>

  type responsiblesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<responsiblesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResponsiblesCountAggregateInputType | true
    }

  export interface responsiblesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['responsibles'], meta: { name: 'responsibles' } }
    /**
     * Find zero or one Responsibles that matches the filter.
     * @param {responsiblesFindUniqueArgs} args - Arguments to find a Responsibles
     * @example
     * // Get one Responsibles
     * const responsibles = await prisma.responsibles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends responsiblesFindUniqueArgs>(args: SelectSubset<T, responsiblesFindUniqueArgs<ExtArgs>>): Prisma__responsiblesClient<$Result.GetResult<Prisma.$responsiblesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Responsibles that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {responsiblesFindUniqueOrThrowArgs} args - Arguments to find a Responsibles
     * @example
     * // Get one Responsibles
     * const responsibles = await prisma.responsibles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends responsiblesFindUniqueOrThrowArgs>(args: SelectSubset<T, responsiblesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__responsiblesClient<$Result.GetResult<Prisma.$responsiblesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Responsibles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsiblesFindFirstArgs} args - Arguments to find a Responsibles
     * @example
     * // Get one Responsibles
     * const responsibles = await prisma.responsibles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends responsiblesFindFirstArgs>(args?: SelectSubset<T, responsiblesFindFirstArgs<ExtArgs>>): Prisma__responsiblesClient<$Result.GetResult<Prisma.$responsiblesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Responsibles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsiblesFindFirstOrThrowArgs} args - Arguments to find a Responsibles
     * @example
     * // Get one Responsibles
     * const responsibles = await prisma.responsibles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends responsiblesFindFirstOrThrowArgs>(args?: SelectSubset<T, responsiblesFindFirstOrThrowArgs<ExtArgs>>): Prisma__responsiblesClient<$Result.GetResult<Prisma.$responsiblesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Responsibles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsiblesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Responsibles
     * const responsibles = await prisma.responsibles.findMany()
     * 
     * // Get first 10 Responsibles
     * const responsibles = await prisma.responsibles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const responsiblesWithIdOnly = await prisma.responsibles.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends responsiblesFindManyArgs>(args?: SelectSubset<T, responsiblesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$responsiblesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Responsibles.
     * @param {responsiblesCreateArgs} args - Arguments to create a Responsibles.
     * @example
     * // Create one Responsibles
     * const Responsibles = await prisma.responsibles.create({
     *   data: {
     *     // ... data to create a Responsibles
     *   }
     * })
     * 
     */
    create<T extends responsiblesCreateArgs>(args: SelectSubset<T, responsiblesCreateArgs<ExtArgs>>): Prisma__responsiblesClient<$Result.GetResult<Prisma.$responsiblesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Responsibles.
     * @param {responsiblesCreateManyArgs} args - Arguments to create many Responsibles.
     * @example
     * // Create many Responsibles
     * const responsibles = await prisma.responsibles.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends responsiblesCreateManyArgs>(args?: SelectSubset<T, responsiblesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Responsibles.
     * @param {responsiblesDeleteArgs} args - Arguments to delete one Responsibles.
     * @example
     * // Delete one Responsibles
     * const Responsibles = await prisma.responsibles.delete({
     *   where: {
     *     // ... filter to delete one Responsibles
     *   }
     * })
     * 
     */
    delete<T extends responsiblesDeleteArgs>(args: SelectSubset<T, responsiblesDeleteArgs<ExtArgs>>): Prisma__responsiblesClient<$Result.GetResult<Prisma.$responsiblesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Responsibles.
     * @param {responsiblesUpdateArgs} args - Arguments to update one Responsibles.
     * @example
     * // Update one Responsibles
     * const responsibles = await prisma.responsibles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends responsiblesUpdateArgs>(args: SelectSubset<T, responsiblesUpdateArgs<ExtArgs>>): Prisma__responsiblesClient<$Result.GetResult<Prisma.$responsiblesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Responsibles.
     * @param {responsiblesDeleteManyArgs} args - Arguments to filter Responsibles to delete.
     * @example
     * // Delete a few Responsibles
     * const { count } = await prisma.responsibles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends responsiblesDeleteManyArgs>(args?: SelectSubset<T, responsiblesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Responsibles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsiblesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Responsibles
     * const responsibles = await prisma.responsibles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends responsiblesUpdateManyArgs>(args: SelectSubset<T, responsiblesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Responsibles.
     * @param {responsiblesUpsertArgs} args - Arguments to update or create a Responsibles.
     * @example
     * // Update or create a Responsibles
     * const responsibles = await prisma.responsibles.upsert({
     *   create: {
     *     // ... data to create a Responsibles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Responsibles we want to update
     *   }
     * })
     */
    upsert<T extends responsiblesUpsertArgs>(args: SelectSubset<T, responsiblesUpsertArgs<ExtArgs>>): Prisma__responsiblesClient<$Result.GetResult<Prisma.$responsiblesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Responsibles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsiblesCountArgs} args - Arguments to filter Responsibles to count.
     * @example
     * // Count the number of Responsibles
     * const count = await prisma.responsibles.count({
     *   where: {
     *     // ... the filter for the Responsibles we want to count
     *   }
     * })
    **/
    count<T extends responsiblesCountArgs>(
      args?: Subset<T, responsiblesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResponsiblesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Responsibles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponsiblesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResponsiblesAggregateArgs>(args: Subset<T, ResponsiblesAggregateArgs>): Prisma.PrismaPromise<GetResponsiblesAggregateType<T>>

    /**
     * Group by Responsibles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsiblesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends responsiblesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: responsiblesGroupByArgs['orderBy'] }
        : { orderBy?: responsiblesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, responsiblesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResponsiblesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the responsibles model
   */
  readonly fields: responsiblesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for responsibles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__responsiblesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reports<T extends responsibles$reportsArgs<ExtArgs> = {}>(args?: Subset<T, responsibles$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the responsibles model
   */ 
  interface responsiblesFieldRefs {
    readonly id: FieldRef<"responsibles", 'Int'>
    readonly name: FieldRef<"responsibles", 'String'>
    readonly email: FieldRef<"responsibles", 'String'>
    readonly phone: FieldRef<"responsibles", 'String'>
    readonly created_at: FieldRef<"responsibles", 'DateTime'>
    readonly updated_at: FieldRef<"responsibles", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * responsibles findUnique
   */
  export type responsiblesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responsibles
     */
    select?: responsiblesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: responsiblesInclude<ExtArgs> | null
    /**
     * Filter, which responsibles to fetch.
     */
    where: responsiblesWhereUniqueInput
  }

  /**
   * responsibles findUniqueOrThrow
   */
  export type responsiblesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responsibles
     */
    select?: responsiblesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: responsiblesInclude<ExtArgs> | null
    /**
     * Filter, which responsibles to fetch.
     */
    where: responsiblesWhereUniqueInput
  }

  /**
   * responsibles findFirst
   */
  export type responsiblesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responsibles
     */
    select?: responsiblesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: responsiblesInclude<ExtArgs> | null
    /**
     * Filter, which responsibles to fetch.
     */
    where?: responsiblesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responsibles to fetch.
     */
    orderBy?: responsiblesOrderByWithRelationInput | responsiblesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for responsibles.
     */
    cursor?: responsiblesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responsibles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responsibles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of responsibles.
     */
    distinct?: ResponsiblesScalarFieldEnum | ResponsiblesScalarFieldEnum[]
  }

  /**
   * responsibles findFirstOrThrow
   */
  export type responsiblesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responsibles
     */
    select?: responsiblesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: responsiblesInclude<ExtArgs> | null
    /**
     * Filter, which responsibles to fetch.
     */
    where?: responsiblesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responsibles to fetch.
     */
    orderBy?: responsiblesOrderByWithRelationInput | responsiblesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for responsibles.
     */
    cursor?: responsiblesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responsibles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responsibles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of responsibles.
     */
    distinct?: ResponsiblesScalarFieldEnum | ResponsiblesScalarFieldEnum[]
  }

  /**
   * responsibles findMany
   */
  export type responsiblesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responsibles
     */
    select?: responsiblesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: responsiblesInclude<ExtArgs> | null
    /**
     * Filter, which responsibles to fetch.
     */
    where?: responsiblesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responsibles to fetch.
     */
    orderBy?: responsiblesOrderByWithRelationInput | responsiblesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing responsibles.
     */
    cursor?: responsiblesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responsibles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responsibles.
     */
    skip?: number
    distinct?: ResponsiblesScalarFieldEnum | ResponsiblesScalarFieldEnum[]
  }

  /**
   * responsibles create
   */
  export type responsiblesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responsibles
     */
    select?: responsiblesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: responsiblesInclude<ExtArgs> | null
    /**
     * The data needed to create a responsibles.
     */
    data: XOR<responsiblesCreateInput, responsiblesUncheckedCreateInput>
  }

  /**
   * responsibles createMany
   */
  export type responsiblesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many responsibles.
     */
    data: responsiblesCreateManyInput | responsiblesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * responsibles update
   */
  export type responsiblesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responsibles
     */
    select?: responsiblesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: responsiblesInclude<ExtArgs> | null
    /**
     * The data needed to update a responsibles.
     */
    data: XOR<responsiblesUpdateInput, responsiblesUncheckedUpdateInput>
    /**
     * Choose, which responsibles to update.
     */
    where: responsiblesWhereUniqueInput
  }

  /**
   * responsibles updateMany
   */
  export type responsiblesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update responsibles.
     */
    data: XOR<responsiblesUpdateManyMutationInput, responsiblesUncheckedUpdateManyInput>
    /**
     * Filter which responsibles to update
     */
    where?: responsiblesWhereInput
  }

  /**
   * responsibles upsert
   */
  export type responsiblesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responsibles
     */
    select?: responsiblesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: responsiblesInclude<ExtArgs> | null
    /**
     * The filter to search for the responsibles to update in case it exists.
     */
    where: responsiblesWhereUniqueInput
    /**
     * In case the responsibles found by the `where` argument doesn't exist, create a new responsibles with this data.
     */
    create: XOR<responsiblesCreateInput, responsiblesUncheckedCreateInput>
    /**
     * In case the responsibles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<responsiblesUpdateInput, responsiblesUncheckedUpdateInput>
  }

  /**
   * responsibles delete
   */
  export type responsiblesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responsibles
     */
    select?: responsiblesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: responsiblesInclude<ExtArgs> | null
    /**
     * Filter which responsibles to delete.
     */
    where: responsiblesWhereUniqueInput
  }

  /**
   * responsibles deleteMany
   */
  export type responsiblesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which responsibles to delete
     */
    where?: responsiblesWhereInput
  }

  /**
   * responsibles.reports
   */
  export type responsibles$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportsInclude<ExtArgs> | null
    where?: reportsWhereInput
    orderBy?: reportsOrderByWithRelationInput | reportsOrderByWithRelationInput[]
    cursor?: reportsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * responsibles without action
   */
  export type responsiblesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responsibles
     */
    select?: responsiblesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: responsiblesInclude<ExtArgs> | null
  }


  /**
   * Model calendar_events
   */

  export type AggregateCalendar_events = {
    _count: Calendar_eventsCountAggregateOutputType | null
    _avg: Calendar_eventsAvgAggregateOutputType | null
    _sum: Calendar_eventsSumAggregateOutputType | null
    _min: Calendar_eventsMinAggregateOutputType | null
    _max: Calendar_eventsMaxAggregateOutputType | null
  }

  export type Calendar_eventsAvgAggregateOutputType = {
    id: number | null
    location_id: number | null
  }

  export type Calendar_eventsSumAggregateOutputType = {
    id: number | null
    location_id: number | null
  }

  export type Calendar_eventsMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    start_date: Date | null
    end_date: Date | null
    location_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Calendar_eventsMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    start_date: Date | null
    end_date: Date | null
    location_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Calendar_eventsCountAggregateOutputType = {
    id: number
    title: number
    description: number
    start_date: number
    end_date: number
    location_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Calendar_eventsAvgAggregateInputType = {
    id?: true
    location_id?: true
  }

  export type Calendar_eventsSumAggregateInputType = {
    id?: true
    location_id?: true
  }

  export type Calendar_eventsMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    start_date?: true
    end_date?: true
    location_id?: true
    created_at?: true
    updated_at?: true
  }

  export type Calendar_eventsMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    start_date?: true
    end_date?: true
    location_id?: true
    created_at?: true
    updated_at?: true
  }

  export type Calendar_eventsCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    start_date?: true
    end_date?: true
    location_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Calendar_eventsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which calendar_events to aggregate.
     */
    where?: calendar_eventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of calendar_events to fetch.
     */
    orderBy?: calendar_eventsOrderByWithRelationInput | calendar_eventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: calendar_eventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` calendar_events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` calendar_events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned calendar_events
    **/
    _count?: true | Calendar_eventsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Calendar_eventsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Calendar_eventsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Calendar_eventsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Calendar_eventsMaxAggregateInputType
  }

  export type GetCalendar_eventsAggregateType<T extends Calendar_eventsAggregateArgs> = {
        [P in keyof T & keyof AggregateCalendar_events]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalendar_events[P]>
      : GetScalarType<T[P], AggregateCalendar_events[P]>
  }




  export type calendar_eventsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: calendar_eventsWhereInput
    orderBy?: calendar_eventsOrderByWithAggregationInput | calendar_eventsOrderByWithAggregationInput[]
    by: Calendar_eventsScalarFieldEnum[] | Calendar_eventsScalarFieldEnum
    having?: calendar_eventsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Calendar_eventsCountAggregateInputType | true
    _avg?: Calendar_eventsAvgAggregateInputType
    _sum?: Calendar_eventsSumAggregateInputType
    _min?: Calendar_eventsMinAggregateInputType
    _max?: Calendar_eventsMaxAggregateInputType
  }

  export type Calendar_eventsGroupByOutputType = {
    id: number
    title: string
    description: string | null
    start_date: Date
    end_date: Date
    location_id: number
    created_at: Date
    updated_at: Date
    _count: Calendar_eventsCountAggregateOutputType | null
    _avg: Calendar_eventsAvgAggregateOutputType | null
    _sum: Calendar_eventsSumAggregateOutputType | null
    _min: Calendar_eventsMinAggregateOutputType | null
    _max: Calendar_eventsMaxAggregateOutputType | null
  }

  type GetCalendar_eventsGroupByPayload<T extends calendar_eventsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Calendar_eventsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Calendar_eventsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Calendar_eventsGroupByOutputType[P]>
            : GetScalarType<T[P], Calendar_eventsGroupByOutputType[P]>
        }
      >
    >


  export type calendar_eventsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    start_date?: boolean
    end_date?: boolean
    location_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    location?: boolean | locationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calendar_events"]>


  export type calendar_eventsSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    start_date?: boolean
    end_date?: boolean
    location_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type calendar_eventsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | locationsDefaultArgs<ExtArgs>
  }

  export type $calendar_eventsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "calendar_events"
    objects: {
      location: Prisma.$locationsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string | null
      start_date: Date
      end_date: Date
      location_id: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["calendar_events"]>
    composites: {}
  }

  type calendar_eventsGetPayload<S extends boolean | null | undefined | calendar_eventsDefaultArgs> = $Result.GetResult<Prisma.$calendar_eventsPayload, S>

  type calendar_eventsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<calendar_eventsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Calendar_eventsCountAggregateInputType | true
    }

  export interface calendar_eventsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['calendar_events'], meta: { name: 'calendar_events' } }
    /**
     * Find zero or one Calendar_events that matches the filter.
     * @param {calendar_eventsFindUniqueArgs} args - Arguments to find a Calendar_events
     * @example
     * // Get one Calendar_events
     * const calendar_events = await prisma.calendar_events.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends calendar_eventsFindUniqueArgs>(args: SelectSubset<T, calendar_eventsFindUniqueArgs<ExtArgs>>): Prisma__calendar_eventsClient<$Result.GetResult<Prisma.$calendar_eventsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Calendar_events that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {calendar_eventsFindUniqueOrThrowArgs} args - Arguments to find a Calendar_events
     * @example
     * // Get one Calendar_events
     * const calendar_events = await prisma.calendar_events.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends calendar_eventsFindUniqueOrThrowArgs>(args: SelectSubset<T, calendar_eventsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__calendar_eventsClient<$Result.GetResult<Prisma.$calendar_eventsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Calendar_events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {calendar_eventsFindFirstArgs} args - Arguments to find a Calendar_events
     * @example
     * // Get one Calendar_events
     * const calendar_events = await prisma.calendar_events.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends calendar_eventsFindFirstArgs>(args?: SelectSubset<T, calendar_eventsFindFirstArgs<ExtArgs>>): Prisma__calendar_eventsClient<$Result.GetResult<Prisma.$calendar_eventsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Calendar_events that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {calendar_eventsFindFirstOrThrowArgs} args - Arguments to find a Calendar_events
     * @example
     * // Get one Calendar_events
     * const calendar_events = await prisma.calendar_events.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends calendar_eventsFindFirstOrThrowArgs>(args?: SelectSubset<T, calendar_eventsFindFirstOrThrowArgs<ExtArgs>>): Prisma__calendar_eventsClient<$Result.GetResult<Prisma.$calendar_eventsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Calendar_events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {calendar_eventsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Calendar_events
     * const calendar_events = await prisma.calendar_events.findMany()
     * 
     * // Get first 10 Calendar_events
     * const calendar_events = await prisma.calendar_events.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calendar_eventsWithIdOnly = await prisma.calendar_events.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends calendar_eventsFindManyArgs>(args?: SelectSubset<T, calendar_eventsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$calendar_eventsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Calendar_events.
     * @param {calendar_eventsCreateArgs} args - Arguments to create a Calendar_events.
     * @example
     * // Create one Calendar_events
     * const Calendar_events = await prisma.calendar_events.create({
     *   data: {
     *     // ... data to create a Calendar_events
     *   }
     * })
     * 
     */
    create<T extends calendar_eventsCreateArgs>(args: SelectSubset<T, calendar_eventsCreateArgs<ExtArgs>>): Prisma__calendar_eventsClient<$Result.GetResult<Prisma.$calendar_eventsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Calendar_events.
     * @param {calendar_eventsCreateManyArgs} args - Arguments to create many Calendar_events.
     * @example
     * // Create many Calendar_events
     * const calendar_events = await prisma.calendar_events.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends calendar_eventsCreateManyArgs>(args?: SelectSubset<T, calendar_eventsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Calendar_events.
     * @param {calendar_eventsDeleteArgs} args - Arguments to delete one Calendar_events.
     * @example
     * // Delete one Calendar_events
     * const Calendar_events = await prisma.calendar_events.delete({
     *   where: {
     *     // ... filter to delete one Calendar_events
     *   }
     * })
     * 
     */
    delete<T extends calendar_eventsDeleteArgs>(args: SelectSubset<T, calendar_eventsDeleteArgs<ExtArgs>>): Prisma__calendar_eventsClient<$Result.GetResult<Prisma.$calendar_eventsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Calendar_events.
     * @param {calendar_eventsUpdateArgs} args - Arguments to update one Calendar_events.
     * @example
     * // Update one Calendar_events
     * const calendar_events = await prisma.calendar_events.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends calendar_eventsUpdateArgs>(args: SelectSubset<T, calendar_eventsUpdateArgs<ExtArgs>>): Prisma__calendar_eventsClient<$Result.GetResult<Prisma.$calendar_eventsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Calendar_events.
     * @param {calendar_eventsDeleteManyArgs} args - Arguments to filter Calendar_events to delete.
     * @example
     * // Delete a few Calendar_events
     * const { count } = await prisma.calendar_events.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends calendar_eventsDeleteManyArgs>(args?: SelectSubset<T, calendar_eventsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Calendar_events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {calendar_eventsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Calendar_events
     * const calendar_events = await prisma.calendar_events.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends calendar_eventsUpdateManyArgs>(args: SelectSubset<T, calendar_eventsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Calendar_events.
     * @param {calendar_eventsUpsertArgs} args - Arguments to update or create a Calendar_events.
     * @example
     * // Update or create a Calendar_events
     * const calendar_events = await prisma.calendar_events.upsert({
     *   create: {
     *     // ... data to create a Calendar_events
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Calendar_events we want to update
     *   }
     * })
     */
    upsert<T extends calendar_eventsUpsertArgs>(args: SelectSubset<T, calendar_eventsUpsertArgs<ExtArgs>>): Prisma__calendar_eventsClient<$Result.GetResult<Prisma.$calendar_eventsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Calendar_events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {calendar_eventsCountArgs} args - Arguments to filter Calendar_events to count.
     * @example
     * // Count the number of Calendar_events
     * const count = await prisma.calendar_events.count({
     *   where: {
     *     // ... the filter for the Calendar_events we want to count
     *   }
     * })
    **/
    count<T extends calendar_eventsCountArgs>(
      args?: Subset<T, calendar_eventsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Calendar_eventsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Calendar_events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Calendar_eventsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Calendar_eventsAggregateArgs>(args: Subset<T, Calendar_eventsAggregateArgs>): Prisma.PrismaPromise<GetCalendar_eventsAggregateType<T>>

    /**
     * Group by Calendar_events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {calendar_eventsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends calendar_eventsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: calendar_eventsGroupByArgs['orderBy'] }
        : { orderBy?: calendar_eventsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, calendar_eventsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalendar_eventsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the calendar_events model
   */
  readonly fields: calendar_eventsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for calendar_events.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__calendar_eventsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends locationsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, locationsDefaultArgs<ExtArgs>>): Prisma__locationsClient<$Result.GetResult<Prisma.$locationsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the calendar_events model
   */ 
  interface calendar_eventsFieldRefs {
    readonly id: FieldRef<"calendar_events", 'Int'>
    readonly title: FieldRef<"calendar_events", 'String'>
    readonly description: FieldRef<"calendar_events", 'String'>
    readonly start_date: FieldRef<"calendar_events", 'DateTime'>
    readonly end_date: FieldRef<"calendar_events", 'DateTime'>
    readonly location_id: FieldRef<"calendar_events", 'Int'>
    readonly created_at: FieldRef<"calendar_events", 'DateTime'>
    readonly updated_at: FieldRef<"calendar_events", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * calendar_events findUnique
   */
  export type calendar_eventsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calendar_events
     */
    select?: calendar_eventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: calendar_eventsInclude<ExtArgs> | null
    /**
     * Filter, which calendar_events to fetch.
     */
    where: calendar_eventsWhereUniqueInput
  }

  /**
   * calendar_events findUniqueOrThrow
   */
  export type calendar_eventsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calendar_events
     */
    select?: calendar_eventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: calendar_eventsInclude<ExtArgs> | null
    /**
     * Filter, which calendar_events to fetch.
     */
    where: calendar_eventsWhereUniqueInput
  }

  /**
   * calendar_events findFirst
   */
  export type calendar_eventsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calendar_events
     */
    select?: calendar_eventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: calendar_eventsInclude<ExtArgs> | null
    /**
     * Filter, which calendar_events to fetch.
     */
    where?: calendar_eventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of calendar_events to fetch.
     */
    orderBy?: calendar_eventsOrderByWithRelationInput | calendar_eventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for calendar_events.
     */
    cursor?: calendar_eventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` calendar_events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` calendar_events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of calendar_events.
     */
    distinct?: Calendar_eventsScalarFieldEnum | Calendar_eventsScalarFieldEnum[]
  }

  /**
   * calendar_events findFirstOrThrow
   */
  export type calendar_eventsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calendar_events
     */
    select?: calendar_eventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: calendar_eventsInclude<ExtArgs> | null
    /**
     * Filter, which calendar_events to fetch.
     */
    where?: calendar_eventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of calendar_events to fetch.
     */
    orderBy?: calendar_eventsOrderByWithRelationInput | calendar_eventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for calendar_events.
     */
    cursor?: calendar_eventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` calendar_events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` calendar_events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of calendar_events.
     */
    distinct?: Calendar_eventsScalarFieldEnum | Calendar_eventsScalarFieldEnum[]
  }

  /**
   * calendar_events findMany
   */
  export type calendar_eventsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calendar_events
     */
    select?: calendar_eventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: calendar_eventsInclude<ExtArgs> | null
    /**
     * Filter, which calendar_events to fetch.
     */
    where?: calendar_eventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of calendar_events to fetch.
     */
    orderBy?: calendar_eventsOrderByWithRelationInput | calendar_eventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing calendar_events.
     */
    cursor?: calendar_eventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` calendar_events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` calendar_events.
     */
    skip?: number
    distinct?: Calendar_eventsScalarFieldEnum | Calendar_eventsScalarFieldEnum[]
  }

  /**
   * calendar_events create
   */
  export type calendar_eventsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calendar_events
     */
    select?: calendar_eventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: calendar_eventsInclude<ExtArgs> | null
    /**
     * The data needed to create a calendar_events.
     */
    data: XOR<calendar_eventsCreateInput, calendar_eventsUncheckedCreateInput>
  }

  /**
   * calendar_events createMany
   */
  export type calendar_eventsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many calendar_events.
     */
    data: calendar_eventsCreateManyInput | calendar_eventsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * calendar_events update
   */
  export type calendar_eventsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calendar_events
     */
    select?: calendar_eventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: calendar_eventsInclude<ExtArgs> | null
    /**
     * The data needed to update a calendar_events.
     */
    data: XOR<calendar_eventsUpdateInput, calendar_eventsUncheckedUpdateInput>
    /**
     * Choose, which calendar_events to update.
     */
    where: calendar_eventsWhereUniqueInput
  }

  /**
   * calendar_events updateMany
   */
  export type calendar_eventsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update calendar_events.
     */
    data: XOR<calendar_eventsUpdateManyMutationInput, calendar_eventsUncheckedUpdateManyInput>
    /**
     * Filter which calendar_events to update
     */
    where?: calendar_eventsWhereInput
  }

  /**
   * calendar_events upsert
   */
  export type calendar_eventsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calendar_events
     */
    select?: calendar_eventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: calendar_eventsInclude<ExtArgs> | null
    /**
     * The filter to search for the calendar_events to update in case it exists.
     */
    where: calendar_eventsWhereUniqueInput
    /**
     * In case the calendar_events found by the `where` argument doesn't exist, create a new calendar_events with this data.
     */
    create: XOR<calendar_eventsCreateInput, calendar_eventsUncheckedCreateInput>
    /**
     * In case the calendar_events was found with the provided `where` argument, update it with this data.
     */
    update: XOR<calendar_eventsUpdateInput, calendar_eventsUncheckedUpdateInput>
  }

  /**
   * calendar_events delete
   */
  export type calendar_eventsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calendar_events
     */
    select?: calendar_eventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: calendar_eventsInclude<ExtArgs> | null
    /**
     * Filter which calendar_events to delete.
     */
    where: calendar_eventsWhereUniqueInput
  }

  /**
   * calendar_events deleteMany
   */
  export type calendar_eventsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which calendar_events to delete
     */
    where?: calendar_eventsWhereInput
  }

  /**
   * calendar_events without action
   */
  export type calendar_eventsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calendar_events
     */
    select?: calendar_eventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: calendar_eventsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ReportsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    location_id: 'location_id',
    responsible_id: 'responsible_id',
    title: 'title',
    description: 'description',
    status: 'status',
    category: 'category',
    imageUrl: 'imageUrl',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ReportsScalarFieldEnum = (typeof ReportsScalarFieldEnum)[keyof typeof ReportsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstname: 'firstname',
    lastname: 'lastname',
    phone: 'phone',
    role: 'role',
    location_id: 'location_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    resettoken: 'resettoken',
    resettokenExpire: 'resettokenExpire'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const LocationsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LocationsScalarFieldEnum = (typeof LocationsScalarFieldEnum)[keyof typeof LocationsScalarFieldEnum]


  export const ResponsiblesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ResponsiblesScalarFieldEnum = (typeof ResponsiblesScalarFieldEnum)[keyof typeof ResponsiblesScalarFieldEnum]


  export const Calendar_eventsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    start_date: 'start_date',
    end_date: 'end_date',
    location_id: 'location_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Calendar_eventsScalarFieldEnum = (typeof Calendar_eventsScalarFieldEnum)[keyof typeof Calendar_eventsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'reports_status'
   */
  export type Enumreports_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'reports_status'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'users_role'
   */
  export type Enumusers_roleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'users_role'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type reportsWhereInput = {
    AND?: reportsWhereInput | reportsWhereInput[]
    OR?: reportsWhereInput[]
    NOT?: reportsWhereInput | reportsWhereInput[]
    id?: IntFilter<"reports"> | number
    user_id?: IntFilter<"reports"> | number
    location_id?: IntNullableFilter<"reports"> | number | null
    responsible_id?: IntNullableFilter<"reports"> | number | null
    title?: StringFilter<"reports"> | string
    description?: StringFilter<"reports"> | string
    status?: Enumreports_statusFilter<"reports"> | $Enums.reports_status
    category?: StringNullableFilter<"reports"> | string | null
    imageUrl?: StringNullableFilter<"reports"> | string | null
    created_at?: DateTimeFilter<"reports"> | Date | string
    updated_at?: DateTimeFilter<"reports"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
    location?: XOR<LocationsNullableRelationFilter, locationsWhereInput> | null
    responsible?: XOR<ResponsiblesNullableRelationFilter, responsiblesWhereInput> | null
  }

  export type reportsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    location_id?: SortOrderInput | SortOrder
    responsible_id?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    category?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    users?: usersOrderByWithRelationInput
    location?: locationsOrderByWithRelationInput
    responsible?: responsiblesOrderByWithRelationInput
  }

  export type reportsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: reportsWhereInput | reportsWhereInput[]
    OR?: reportsWhereInput[]
    NOT?: reportsWhereInput | reportsWhereInput[]
    user_id?: IntFilter<"reports"> | number
    location_id?: IntNullableFilter<"reports"> | number | null
    responsible_id?: IntNullableFilter<"reports"> | number | null
    title?: StringFilter<"reports"> | string
    description?: StringFilter<"reports"> | string
    status?: Enumreports_statusFilter<"reports"> | $Enums.reports_status
    category?: StringNullableFilter<"reports"> | string | null
    imageUrl?: StringNullableFilter<"reports"> | string | null
    created_at?: DateTimeFilter<"reports"> | Date | string
    updated_at?: DateTimeFilter<"reports"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
    location?: XOR<LocationsNullableRelationFilter, locationsWhereInput> | null
    responsible?: XOR<ResponsiblesNullableRelationFilter, responsiblesWhereInput> | null
  }, "id">

  export type reportsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    location_id?: SortOrderInput | SortOrder
    responsible_id?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    category?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: reportsCountOrderByAggregateInput
    _avg?: reportsAvgOrderByAggregateInput
    _max?: reportsMaxOrderByAggregateInput
    _min?: reportsMinOrderByAggregateInput
    _sum?: reportsSumOrderByAggregateInput
  }

  export type reportsScalarWhereWithAggregatesInput = {
    AND?: reportsScalarWhereWithAggregatesInput | reportsScalarWhereWithAggregatesInput[]
    OR?: reportsScalarWhereWithAggregatesInput[]
    NOT?: reportsScalarWhereWithAggregatesInput | reportsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"reports"> | number
    user_id?: IntWithAggregatesFilter<"reports"> | number
    location_id?: IntNullableWithAggregatesFilter<"reports"> | number | null
    responsible_id?: IntNullableWithAggregatesFilter<"reports"> | number | null
    title?: StringWithAggregatesFilter<"reports"> | string
    description?: StringWithAggregatesFilter<"reports"> | string
    status?: Enumreports_statusWithAggregatesFilter<"reports"> | $Enums.reports_status
    category?: StringNullableWithAggregatesFilter<"reports"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"reports"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"reports"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"reports"> | Date | string
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    firstname?: StringNullableFilter<"users"> | string | null
    lastname?: StringNullableFilter<"users"> | string | null
    phone?: StringNullableFilter<"users"> | string | null
    role?: Enumusers_roleFilter<"users"> | $Enums.users_role
    location_id?: IntNullableFilter<"users"> | number | null
    created_at?: DateTimeFilter<"users"> | Date | string
    updated_at?: DateTimeFilter<"users"> | Date | string
    resettoken?: StringNullableFilter<"users"> | string | null
    resettokenExpire?: DateTimeNullableFilter<"users"> | Date | string | null
    location?: XOR<LocationsNullableRelationFilter, locationsWhereInput> | null
    reports?: ReportsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstname?: SortOrderInput | SortOrder
    lastname?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    location_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    resettoken?: SortOrderInput | SortOrder
    resettokenExpire?: SortOrderInput | SortOrder
    location?: locationsOrderByWithRelationInput
    reports?: reportsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    password?: StringFilter<"users"> | string
    firstname?: StringNullableFilter<"users"> | string | null
    lastname?: StringNullableFilter<"users"> | string | null
    phone?: StringNullableFilter<"users"> | string | null
    role?: Enumusers_roleFilter<"users"> | $Enums.users_role
    location_id?: IntNullableFilter<"users"> | number | null
    created_at?: DateTimeFilter<"users"> | Date | string
    updated_at?: DateTimeFilter<"users"> | Date | string
    resettoken?: StringNullableFilter<"users"> | string | null
    resettokenExpire?: DateTimeNullableFilter<"users"> | Date | string | null
    location?: XOR<LocationsNullableRelationFilter, locationsWhereInput> | null
    reports?: ReportsListRelationFilter
  }, "id" | "email">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstname?: SortOrderInput | SortOrder
    lastname?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    location_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    resettoken?: SortOrderInput | SortOrder
    resettokenExpire?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    firstname?: StringNullableWithAggregatesFilter<"users"> | string | null
    lastname?: StringNullableWithAggregatesFilter<"users"> | string | null
    phone?: StringNullableWithAggregatesFilter<"users"> | string | null
    role?: Enumusers_roleWithAggregatesFilter<"users"> | $Enums.users_role
    location_id?: IntNullableWithAggregatesFilter<"users"> | number | null
    created_at?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"users"> | Date | string
    resettoken?: StringNullableWithAggregatesFilter<"users"> | string | null
    resettokenExpire?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
  }

  export type locationsWhereInput = {
    AND?: locationsWhereInput | locationsWhereInput[]
    OR?: locationsWhereInput[]
    NOT?: locationsWhereInput | locationsWhereInput[]
    id?: IntFilter<"locations"> | number
    name?: StringFilter<"locations"> | string
    address?: StringFilter<"locations"> | string
    created_at?: DateTimeFilter<"locations"> | Date | string
    updated_at?: DateTimeFilter<"locations"> | Date | string
    reports?: ReportsListRelationFilter
    calendarEvents?: Calendar_eventsListRelationFilter
    users?: UsersListRelationFilter
  }

  export type locationsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    reports?: reportsOrderByRelationAggregateInput
    calendarEvents?: calendar_eventsOrderByRelationAggregateInput
    users?: usersOrderByRelationAggregateInput
  }

  export type locationsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: locationsWhereInput | locationsWhereInput[]
    OR?: locationsWhereInput[]
    NOT?: locationsWhereInput | locationsWhereInput[]
    name?: StringFilter<"locations"> | string
    address?: StringFilter<"locations"> | string
    created_at?: DateTimeFilter<"locations"> | Date | string
    updated_at?: DateTimeFilter<"locations"> | Date | string
    reports?: ReportsListRelationFilter
    calendarEvents?: Calendar_eventsListRelationFilter
    users?: UsersListRelationFilter
  }, "id">

  export type locationsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: locationsCountOrderByAggregateInput
    _avg?: locationsAvgOrderByAggregateInput
    _max?: locationsMaxOrderByAggregateInput
    _min?: locationsMinOrderByAggregateInput
    _sum?: locationsSumOrderByAggregateInput
  }

  export type locationsScalarWhereWithAggregatesInput = {
    AND?: locationsScalarWhereWithAggregatesInput | locationsScalarWhereWithAggregatesInput[]
    OR?: locationsScalarWhereWithAggregatesInput[]
    NOT?: locationsScalarWhereWithAggregatesInput | locationsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"locations"> | number
    name?: StringWithAggregatesFilter<"locations"> | string
    address?: StringWithAggregatesFilter<"locations"> | string
    created_at?: DateTimeWithAggregatesFilter<"locations"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"locations"> | Date | string
  }

  export type responsiblesWhereInput = {
    AND?: responsiblesWhereInput | responsiblesWhereInput[]
    OR?: responsiblesWhereInput[]
    NOT?: responsiblesWhereInput | responsiblesWhereInput[]
    id?: IntFilter<"responsibles"> | number
    name?: StringFilter<"responsibles"> | string
    email?: StringFilter<"responsibles"> | string
    phone?: StringNullableFilter<"responsibles"> | string | null
    created_at?: DateTimeFilter<"responsibles"> | Date | string
    updated_at?: DateTimeFilter<"responsibles"> | Date | string
    reports?: ReportsListRelationFilter
  }

  export type responsiblesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    reports?: reportsOrderByRelationAggregateInput
  }

  export type responsiblesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: responsiblesWhereInput | responsiblesWhereInput[]
    OR?: responsiblesWhereInput[]
    NOT?: responsiblesWhereInput | responsiblesWhereInput[]
    name?: StringFilter<"responsibles"> | string
    phone?: StringNullableFilter<"responsibles"> | string | null
    created_at?: DateTimeFilter<"responsibles"> | Date | string
    updated_at?: DateTimeFilter<"responsibles"> | Date | string
    reports?: ReportsListRelationFilter
  }, "id" | "email">

  export type responsiblesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: responsiblesCountOrderByAggregateInput
    _avg?: responsiblesAvgOrderByAggregateInput
    _max?: responsiblesMaxOrderByAggregateInput
    _min?: responsiblesMinOrderByAggregateInput
    _sum?: responsiblesSumOrderByAggregateInput
  }

  export type responsiblesScalarWhereWithAggregatesInput = {
    AND?: responsiblesScalarWhereWithAggregatesInput | responsiblesScalarWhereWithAggregatesInput[]
    OR?: responsiblesScalarWhereWithAggregatesInput[]
    NOT?: responsiblesScalarWhereWithAggregatesInput | responsiblesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"responsibles"> | number
    name?: StringWithAggregatesFilter<"responsibles"> | string
    email?: StringWithAggregatesFilter<"responsibles"> | string
    phone?: StringNullableWithAggregatesFilter<"responsibles"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"responsibles"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"responsibles"> | Date | string
  }

  export type calendar_eventsWhereInput = {
    AND?: calendar_eventsWhereInput | calendar_eventsWhereInput[]
    OR?: calendar_eventsWhereInput[]
    NOT?: calendar_eventsWhereInput | calendar_eventsWhereInput[]
    id?: IntFilter<"calendar_events"> | number
    title?: StringFilter<"calendar_events"> | string
    description?: StringNullableFilter<"calendar_events"> | string | null
    start_date?: DateTimeFilter<"calendar_events"> | Date | string
    end_date?: DateTimeFilter<"calendar_events"> | Date | string
    location_id?: IntFilter<"calendar_events"> | number
    created_at?: DateTimeFilter<"calendar_events"> | Date | string
    updated_at?: DateTimeFilter<"calendar_events"> | Date | string
    location?: XOR<LocationsRelationFilter, locationsWhereInput>
  }

  export type calendar_eventsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    location_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    location?: locationsOrderByWithRelationInput
  }

  export type calendar_eventsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: calendar_eventsWhereInput | calendar_eventsWhereInput[]
    OR?: calendar_eventsWhereInput[]
    NOT?: calendar_eventsWhereInput | calendar_eventsWhereInput[]
    title?: StringFilter<"calendar_events"> | string
    description?: StringNullableFilter<"calendar_events"> | string | null
    start_date?: DateTimeFilter<"calendar_events"> | Date | string
    end_date?: DateTimeFilter<"calendar_events"> | Date | string
    location_id?: IntFilter<"calendar_events"> | number
    created_at?: DateTimeFilter<"calendar_events"> | Date | string
    updated_at?: DateTimeFilter<"calendar_events"> | Date | string
    location?: XOR<LocationsRelationFilter, locationsWhereInput>
  }, "id">

  export type calendar_eventsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    location_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: calendar_eventsCountOrderByAggregateInput
    _avg?: calendar_eventsAvgOrderByAggregateInput
    _max?: calendar_eventsMaxOrderByAggregateInput
    _min?: calendar_eventsMinOrderByAggregateInput
    _sum?: calendar_eventsSumOrderByAggregateInput
  }

  export type calendar_eventsScalarWhereWithAggregatesInput = {
    AND?: calendar_eventsScalarWhereWithAggregatesInput | calendar_eventsScalarWhereWithAggregatesInput[]
    OR?: calendar_eventsScalarWhereWithAggregatesInput[]
    NOT?: calendar_eventsScalarWhereWithAggregatesInput | calendar_eventsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"calendar_events"> | number
    title?: StringWithAggregatesFilter<"calendar_events"> | string
    description?: StringNullableWithAggregatesFilter<"calendar_events"> | string | null
    start_date?: DateTimeWithAggregatesFilter<"calendar_events"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"calendar_events"> | Date | string
    location_id?: IntWithAggregatesFilter<"calendar_events"> | number
    created_at?: DateTimeWithAggregatesFilter<"calendar_events"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"calendar_events"> | Date | string
  }

  export type reportsCreateInput = {
    title: string
    description: string
    status?: $Enums.reports_status
    category?: string | null
    imageUrl?: string | null
    created_at?: Date | string
    updated_at: Date | string
    users: usersCreateNestedOneWithoutReportsInput
    location?: locationsCreateNestedOneWithoutReportsInput
    responsible?: responsiblesCreateNestedOneWithoutReportsInput
  }

  export type reportsUncheckedCreateInput = {
    id?: number
    user_id: number
    location_id?: number | null
    responsible_id?: number | null
    title: string
    description: string
    status?: $Enums.reports_status
    category?: string | null
    imageUrl?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type reportsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: Enumreports_statusFieldUpdateOperationsInput | $Enums.reports_status
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutReportsNestedInput
    location?: locationsUpdateOneWithoutReportsNestedInput
    responsible?: responsiblesUpdateOneWithoutReportsNestedInput
  }

  export type reportsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    location_id?: NullableIntFieldUpdateOperationsInput | number | null
    responsible_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: Enumreports_statusFieldUpdateOperationsInput | $Enums.reports_status
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportsCreateManyInput = {
    id?: number
    user_id: number
    location_id?: number | null
    responsible_id?: number | null
    title: string
    description: string
    status?: $Enums.reports_status
    category?: string | null
    imageUrl?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type reportsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: Enumreports_statusFieldUpdateOperationsInput | $Enums.reports_status
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    location_id?: NullableIntFieldUpdateOperationsInput | number | null
    responsible_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: Enumreports_statusFieldUpdateOperationsInput | $Enums.reports_status
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateInput = {
    email: string
    password: string
    firstname?: string | null
    lastname?: string | null
    phone?: string | null
    role?: $Enums.users_role
    created_at?: Date | string
    updated_at: Date | string
    resettoken?: string | null
    resettokenExpire?: Date | string | null
    location?: locationsCreateNestedOneWithoutUsersInput
    reports?: reportsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    firstname?: string | null
    lastname?: string | null
    phone?: string | null
    role?: $Enums.users_role
    location_id?: number | null
    created_at?: Date | string
    updated_at: Date | string
    resettoken?: string | null
    resettokenExpire?: Date | string | null
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resettoken?: NullableStringFieldUpdateOperationsInput | string | null
    resettokenExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: locationsUpdateOneWithoutUsersNestedInput
    reports?: reportsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    location_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resettoken?: NullableStringFieldUpdateOperationsInput | string | null
    resettokenExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    email: string
    password: string
    firstname?: string | null
    lastname?: string | null
    phone?: string | null
    role?: $Enums.users_role
    location_id?: number | null
    created_at?: Date | string
    updated_at: Date | string
    resettoken?: string | null
    resettokenExpire?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resettoken?: NullableStringFieldUpdateOperationsInput | string | null
    resettokenExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    location_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resettoken?: NullableStringFieldUpdateOperationsInput | string | null
    resettokenExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type locationsCreateInput = {
    name: string
    address: string
    created_at?: Date | string
    updated_at: Date | string
    reports?: reportsCreateNestedManyWithoutLocationInput
    calendarEvents?: calendar_eventsCreateNestedManyWithoutLocationInput
    users?: usersCreateNestedManyWithoutLocationInput
  }

  export type locationsUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    created_at?: Date | string
    updated_at: Date | string
    reports?: reportsUncheckedCreateNestedManyWithoutLocationInput
    calendarEvents?: calendar_eventsUncheckedCreateNestedManyWithoutLocationInput
    users?: usersUncheckedCreateNestedManyWithoutLocationInput
  }

  export type locationsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: reportsUpdateManyWithoutLocationNestedInput
    calendarEvents?: calendar_eventsUpdateManyWithoutLocationNestedInput
    users?: usersUpdateManyWithoutLocationNestedInput
  }

  export type locationsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: reportsUncheckedUpdateManyWithoutLocationNestedInput
    calendarEvents?: calendar_eventsUncheckedUpdateManyWithoutLocationNestedInput
    users?: usersUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type locationsCreateManyInput = {
    id?: number
    name: string
    address: string
    created_at?: Date | string
    updated_at: Date | string
  }

  export type locationsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type locationsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type responsiblesCreateInput = {
    name: string
    email: string
    phone?: string | null
    created_at?: Date | string
    updated_at: Date | string
    reports?: reportsCreateNestedManyWithoutResponsibleInput
  }

  export type responsiblesUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    created_at?: Date | string
    updated_at: Date | string
    reports?: reportsUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type responsiblesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: reportsUpdateManyWithoutResponsibleNestedInput
  }

  export type responsiblesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: reportsUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type responsiblesCreateManyInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type responsiblesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type responsiblesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type calendar_eventsCreateInput = {
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    created_at?: Date | string
    updated_at: Date | string
    location: locationsCreateNestedOneWithoutCalendarEventsInput
  }

  export type calendar_eventsUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    location_id: number
    created_at?: Date | string
    updated_at: Date | string
  }

  export type calendar_eventsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: locationsUpdateOneRequiredWithoutCalendarEventsNestedInput
  }

  export type calendar_eventsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    location_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type calendar_eventsCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    location_id: number
    created_at?: Date | string
    updated_at: Date | string
  }

  export type calendar_eventsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type calendar_eventsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    location_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Enumreports_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.reports_status | Enumreports_statusFieldRefInput<$PrismaModel>
    in?: $Enums.reports_status[]
    notIn?: $Enums.reports_status[]
    not?: NestedEnumreports_statusFilter<$PrismaModel> | $Enums.reports_status
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type LocationsNullableRelationFilter = {
    is?: locationsWhereInput | null
    isNot?: locationsWhereInput | null
  }

  export type ResponsiblesNullableRelationFilter = {
    is?: responsiblesWhereInput | null
    isNot?: responsiblesWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type reportsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    location_id?: SortOrder
    responsible_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type reportsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    location_id?: SortOrder
    responsible_id?: SortOrder
  }

  export type reportsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    location_id?: SortOrder
    responsible_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type reportsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    location_id?: SortOrder
    responsible_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type reportsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    location_id?: SortOrder
    responsible_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type Enumreports_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reports_status | Enumreports_statusFieldRefInput<$PrismaModel>
    in?: $Enums.reports_status[]
    notIn?: $Enums.reports_status[]
    not?: NestedEnumreports_statusWithAggregatesFilter<$PrismaModel> | $Enums.reports_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumreports_statusFilter<$PrismaModel>
    _max?: NestedEnumreports_statusFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type Enumusers_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel>
    in?: $Enums.users_role[]
    notIn?: $Enums.users_role[]
    not?: NestedEnumusers_roleFilter<$PrismaModel> | $Enums.users_role
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ReportsListRelationFilter = {
    every?: reportsWhereInput
    some?: reportsWhereInput
    none?: reportsWhereInput
  }

  export type reportsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    location_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    resettoken?: SortOrder
    resettokenExpire?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    location_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    location_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    resettoken?: SortOrder
    resettokenExpire?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    location_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    resettoken?: SortOrder
    resettokenExpire?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    location_id?: SortOrder
  }

  export type Enumusers_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel>
    in?: $Enums.users_role[]
    notIn?: $Enums.users_role[]
    not?: NestedEnumusers_roleWithAggregatesFilter<$PrismaModel> | $Enums.users_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumusers_roleFilter<$PrismaModel>
    _max?: NestedEnumusers_roleFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type Calendar_eventsListRelationFilter = {
    every?: calendar_eventsWhereInput
    some?: calendar_eventsWhereInput
    none?: calendar_eventsWhereInput
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type calendar_eventsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type locationsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type locationsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type locationsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type locationsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type locationsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type responsiblesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type responsiblesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type responsiblesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type responsiblesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type responsiblesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LocationsRelationFilter = {
    is?: locationsWhereInput
    isNot?: locationsWhereInput
  }

  export type calendar_eventsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    location_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type calendar_eventsAvgOrderByAggregateInput = {
    id?: SortOrder
    location_id?: SortOrder
  }

  export type calendar_eventsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    location_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type calendar_eventsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    location_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type calendar_eventsSumOrderByAggregateInput = {
    id?: SortOrder
    location_id?: SortOrder
  }

  export type usersCreateNestedOneWithoutReportsInput = {
    create?: XOR<usersCreateWithoutReportsInput, usersUncheckedCreateWithoutReportsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReportsInput
    connect?: usersWhereUniqueInput
  }

  export type locationsCreateNestedOneWithoutReportsInput = {
    create?: XOR<locationsCreateWithoutReportsInput, locationsUncheckedCreateWithoutReportsInput>
    connectOrCreate?: locationsCreateOrConnectWithoutReportsInput
    connect?: locationsWhereUniqueInput
  }

  export type responsiblesCreateNestedOneWithoutReportsInput = {
    create?: XOR<responsiblesCreateWithoutReportsInput, responsiblesUncheckedCreateWithoutReportsInput>
    connectOrCreate?: responsiblesCreateOrConnectWithoutReportsInput
    connect?: responsiblesWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type Enumreports_statusFieldUpdateOperationsInput = {
    set?: $Enums.reports_status
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usersUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<usersCreateWithoutReportsInput, usersUncheckedCreateWithoutReportsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReportsInput
    upsert?: usersUpsertWithoutReportsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutReportsInput, usersUpdateWithoutReportsInput>, usersUncheckedUpdateWithoutReportsInput>
  }

  export type locationsUpdateOneWithoutReportsNestedInput = {
    create?: XOR<locationsCreateWithoutReportsInput, locationsUncheckedCreateWithoutReportsInput>
    connectOrCreate?: locationsCreateOrConnectWithoutReportsInput
    upsert?: locationsUpsertWithoutReportsInput
    disconnect?: locationsWhereInput | boolean
    delete?: locationsWhereInput | boolean
    connect?: locationsWhereUniqueInput
    update?: XOR<XOR<locationsUpdateToOneWithWhereWithoutReportsInput, locationsUpdateWithoutReportsInput>, locationsUncheckedUpdateWithoutReportsInput>
  }

  export type responsiblesUpdateOneWithoutReportsNestedInput = {
    create?: XOR<responsiblesCreateWithoutReportsInput, responsiblesUncheckedCreateWithoutReportsInput>
    connectOrCreate?: responsiblesCreateOrConnectWithoutReportsInput
    upsert?: responsiblesUpsertWithoutReportsInput
    disconnect?: responsiblesWhereInput | boolean
    delete?: responsiblesWhereInput | boolean
    connect?: responsiblesWhereUniqueInput
    update?: XOR<XOR<responsiblesUpdateToOneWithWhereWithoutReportsInput, responsiblesUpdateWithoutReportsInput>, responsiblesUncheckedUpdateWithoutReportsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type locationsCreateNestedOneWithoutUsersInput = {
    create?: XOR<locationsCreateWithoutUsersInput, locationsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: locationsCreateOrConnectWithoutUsersInput
    connect?: locationsWhereUniqueInput
  }

  export type reportsCreateNestedManyWithoutUsersInput = {
    create?: XOR<reportsCreateWithoutUsersInput, reportsUncheckedCreateWithoutUsersInput> | reportsCreateWithoutUsersInput[] | reportsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutUsersInput | reportsCreateOrConnectWithoutUsersInput[]
    createMany?: reportsCreateManyUsersInputEnvelope
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
  }

  export type reportsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<reportsCreateWithoutUsersInput, reportsUncheckedCreateWithoutUsersInput> | reportsCreateWithoutUsersInput[] | reportsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutUsersInput | reportsCreateOrConnectWithoutUsersInput[]
    createMany?: reportsCreateManyUsersInputEnvelope
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
  }

  export type Enumusers_roleFieldUpdateOperationsInput = {
    set?: $Enums.users_role
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type locationsUpdateOneWithoutUsersNestedInput = {
    create?: XOR<locationsCreateWithoutUsersInput, locationsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: locationsCreateOrConnectWithoutUsersInput
    upsert?: locationsUpsertWithoutUsersInput
    disconnect?: locationsWhereInput | boolean
    delete?: locationsWhereInput | boolean
    connect?: locationsWhereUniqueInput
    update?: XOR<XOR<locationsUpdateToOneWithWhereWithoutUsersInput, locationsUpdateWithoutUsersInput>, locationsUncheckedUpdateWithoutUsersInput>
  }

  export type reportsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<reportsCreateWithoutUsersInput, reportsUncheckedCreateWithoutUsersInput> | reportsCreateWithoutUsersInput[] | reportsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutUsersInput | reportsCreateOrConnectWithoutUsersInput[]
    upsert?: reportsUpsertWithWhereUniqueWithoutUsersInput | reportsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: reportsCreateManyUsersInputEnvelope
    set?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    disconnect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    delete?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    update?: reportsUpdateWithWhereUniqueWithoutUsersInput | reportsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: reportsUpdateManyWithWhereWithoutUsersInput | reportsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: reportsScalarWhereInput | reportsScalarWhereInput[]
  }

  export type reportsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<reportsCreateWithoutUsersInput, reportsUncheckedCreateWithoutUsersInput> | reportsCreateWithoutUsersInput[] | reportsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutUsersInput | reportsCreateOrConnectWithoutUsersInput[]
    upsert?: reportsUpsertWithWhereUniqueWithoutUsersInput | reportsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: reportsCreateManyUsersInputEnvelope
    set?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    disconnect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    delete?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    update?: reportsUpdateWithWhereUniqueWithoutUsersInput | reportsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: reportsUpdateManyWithWhereWithoutUsersInput | reportsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: reportsScalarWhereInput | reportsScalarWhereInput[]
  }

  export type reportsCreateNestedManyWithoutLocationInput = {
    create?: XOR<reportsCreateWithoutLocationInput, reportsUncheckedCreateWithoutLocationInput> | reportsCreateWithoutLocationInput[] | reportsUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutLocationInput | reportsCreateOrConnectWithoutLocationInput[]
    createMany?: reportsCreateManyLocationInputEnvelope
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
  }

  export type calendar_eventsCreateNestedManyWithoutLocationInput = {
    create?: XOR<calendar_eventsCreateWithoutLocationInput, calendar_eventsUncheckedCreateWithoutLocationInput> | calendar_eventsCreateWithoutLocationInput[] | calendar_eventsUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: calendar_eventsCreateOrConnectWithoutLocationInput | calendar_eventsCreateOrConnectWithoutLocationInput[]
    createMany?: calendar_eventsCreateManyLocationInputEnvelope
    connect?: calendar_eventsWhereUniqueInput | calendar_eventsWhereUniqueInput[]
  }

  export type usersCreateNestedManyWithoutLocationInput = {
    create?: XOR<usersCreateWithoutLocationInput, usersUncheckedCreateWithoutLocationInput> | usersCreateWithoutLocationInput[] | usersUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: usersCreateOrConnectWithoutLocationInput | usersCreateOrConnectWithoutLocationInput[]
    createMany?: usersCreateManyLocationInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type reportsUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<reportsCreateWithoutLocationInput, reportsUncheckedCreateWithoutLocationInput> | reportsCreateWithoutLocationInput[] | reportsUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutLocationInput | reportsCreateOrConnectWithoutLocationInput[]
    createMany?: reportsCreateManyLocationInputEnvelope
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
  }

  export type calendar_eventsUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<calendar_eventsCreateWithoutLocationInput, calendar_eventsUncheckedCreateWithoutLocationInput> | calendar_eventsCreateWithoutLocationInput[] | calendar_eventsUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: calendar_eventsCreateOrConnectWithoutLocationInput | calendar_eventsCreateOrConnectWithoutLocationInput[]
    createMany?: calendar_eventsCreateManyLocationInputEnvelope
    connect?: calendar_eventsWhereUniqueInput | calendar_eventsWhereUniqueInput[]
  }

  export type usersUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<usersCreateWithoutLocationInput, usersUncheckedCreateWithoutLocationInput> | usersCreateWithoutLocationInput[] | usersUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: usersCreateOrConnectWithoutLocationInput | usersCreateOrConnectWithoutLocationInput[]
    createMany?: usersCreateManyLocationInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type reportsUpdateManyWithoutLocationNestedInput = {
    create?: XOR<reportsCreateWithoutLocationInput, reportsUncheckedCreateWithoutLocationInput> | reportsCreateWithoutLocationInput[] | reportsUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutLocationInput | reportsCreateOrConnectWithoutLocationInput[]
    upsert?: reportsUpsertWithWhereUniqueWithoutLocationInput | reportsUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: reportsCreateManyLocationInputEnvelope
    set?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    disconnect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    delete?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    update?: reportsUpdateWithWhereUniqueWithoutLocationInput | reportsUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: reportsUpdateManyWithWhereWithoutLocationInput | reportsUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: reportsScalarWhereInput | reportsScalarWhereInput[]
  }

  export type calendar_eventsUpdateManyWithoutLocationNestedInput = {
    create?: XOR<calendar_eventsCreateWithoutLocationInput, calendar_eventsUncheckedCreateWithoutLocationInput> | calendar_eventsCreateWithoutLocationInput[] | calendar_eventsUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: calendar_eventsCreateOrConnectWithoutLocationInput | calendar_eventsCreateOrConnectWithoutLocationInput[]
    upsert?: calendar_eventsUpsertWithWhereUniqueWithoutLocationInput | calendar_eventsUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: calendar_eventsCreateManyLocationInputEnvelope
    set?: calendar_eventsWhereUniqueInput | calendar_eventsWhereUniqueInput[]
    disconnect?: calendar_eventsWhereUniqueInput | calendar_eventsWhereUniqueInput[]
    delete?: calendar_eventsWhereUniqueInput | calendar_eventsWhereUniqueInput[]
    connect?: calendar_eventsWhereUniqueInput | calendar_eventsWhereUniqueInput[]
    update?: calendar_eventsUpdateWithWhereUniqueWithoutLocationInput | calendar_eventsUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: calendar_eventsUpdateManyWithWhereWithoutLocationInput | calendar_eventsUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: calendar_eventsScalarWhereInput | calendar_eventsScalarWhereInput[]
  }

  export type usersUpdateManyWithoutLocationNestedInput = {
    create?: XOR<usersCreateWithoutLocationInput, usersUncheckedCreateWithoutLocationInput> | usersCreateWithoutLocationInput[] | usersUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: usersCreateOrConnectWithoutLocationInput | usersCreateOrConnectWithoutLocationInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutLocationInput | usersUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: usersCreateManyLocationInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutLocationInput | usersUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: usersUpdateManyWithWhereWithoutLocationInput | usersUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type reportsUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<reportsCreateWithoutLocationInput, reportsUncheckedCreateWithoutLocationInput> | reportsCreateWithoutLocationInput[] | reportsUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutLocationInput | reportsCreateOrConnectWithoutLocationInput[]
    upsert?: reportsUpsertWithWhereUniqueWithoutLocationInput | reportsUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: reportsCreateManyLocationInputEnvelope
    set?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    disconnect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    delete?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    update?: reportsUpdateWithWhereUniqueWithoutLocationInput | reportsUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: reportsUpdateManyWithWhereWithoutLocationInput | reportsUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: reportsScalarWhereInput | reportsScalarWhereInput[]
  }

  export type calendar_eventsUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<calendar_eventsCreateWithoutLocationInput, calendar_eventsUncheckedCreateWithoutLocationInput> | calendar_eventsCreateWithoutLocationInput[] | calendar_eventsUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: calendar_eventsCreateOrConnectWithoutLocationInput | calendar_eventsCreateOrConnectWithoutLocationInput[]
    upsert?: calendar_eventsUpsertWithWhereUniqueWithoutLocationInput | calendar_eventsUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: calendar_eventsCreateManyLocationInputEnvelope
    set?: calendar_eventsWhereUniqueInput | calendar_eventsWhereUniqueInput[]
    disconnect?: calendar_eventsWhereUniqueInput | calendar_eventsWhereUniqueInput[]
    delete?: calendar_eventsWhereUniqueInput | calendar_eventsWhereUniqueInput[]
    connect?: calendar_eventsWhereUniqueInput | calendar_eventsWhereUniqueInput[]
    update?: calendar_eventsUpdateWithWhereUniqueWithoutLocationInput | calendar_eventsUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: calendar_eventsUpdateManyWithWhereWithoutLocationInput | calendar_eventsUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: calendar_eventsScalarWhereInput | calendar_eventsScalarWhereInput[]
  }

  export type usersUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<usersCreateWithoutLocationInput, usersUncheckedCreateWithoutLocationInput> | usersCreateWithoutLocationInput[] | usersUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: usersCreateOrConnectWithoutLocationInput | usersCreateOrConnectWithoutLocationInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutLocationInput | usersUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: usersCreateManyLocationInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutLocationInput | usersUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: usersUpdateManyWithWhereWithoutLocationInput | usersUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type reportsCreateNestedManyWithoutResponsibleInput = {
    create?: XOR<reportsCreateWithoutResponsibleInput, reportsUncheckedCreateWithoutResponsibleInput> | reportsCreateWithoutResponsibleInput[] | reportsUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutResponsibleInput | reportsCreateOrConnectWithoutResponsibleInput[]
    createMany?: reportsCreateManyResponsibleInputEnvelope
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
  }

  export type reportsUncheckedCreateNestedManyWithoutResponsibleInput = {
    create?: XOR<reportsCreateWithoutResponsibleInput, reportsUncheckedCreateWithoutResponsibleInput> | reportsCreateWithoutResponsibleInput[] | reportsUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutResponsibleInput | reportsCreateOrConnectWithoutResponsibleInput[]
    createMany?: reportsCreateManyResponsibleInputEnvelope
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
  }

  export type reportsUpdateManyWithoutResponsibleNestedInput = {
    create?: XOR<reportsCreateWithoutResponsibleInput, reportsUncheckedCreateWithoutResponsibleInput> | reportsCreateWithoutResponsibleInput[] | reportsUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutResponsibleInput | reportsCreateOrConnectWithoutResponsibleInput[]
    upsert?: reportsUpsertWithWhereUniqueWithoutResponsibleInput | reportsUpsertWithWhereUniqueWithoutResponsibleInput[]
    createMany?: reportsCreateManyResponsibleInputEnvelope
    set?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    disconnect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    delete?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    update?: reportsUpdateWithWhereUniqueWithoutResponsibleInput | reportsUpdateWithWhereUniqueWithoutResponsibleInput[]
    updateMany?: reportsUpdateManyWithWhereWithoutResponsibleInput | reportsUpdateManyWithWhereWithoutResponsibleInput[]
    deleteMany?: reportsScalarWhereInput | reportsScalarWhereInput[]
  }

  export type reportsUncheckedUpdateManyWithoutResponsibleNestedInput = {
    create?: XOR<reportsCreateWithoutResponsibleInput, reportsUncheckedCreateWithoutResponsibleInput> | reportsCreateWithoutResponsibleInput[] | reportsUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: reportsCreateOrConnectWithoutResponsibleInput | reportsCreateOrConnectWithoutResponsibleInput[]
    upsert?: reportsUpsertWithWhereUniqueWithoutResponsibleInput | reportsUpsertWithWhereUniqueWithoutResponsibleInput[]
    createMany?: reportsCreateManyResponsibleInputEnvelope
    set?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    disconnect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    delete?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    connect?: reportsWhereUniqueInput | reportsWhereUniqueInput[]
    update?: reportsUpdateWithWhereUniqueWithoutResponsibleInput | reportsUpdateWithWhereUniqueWithoutResponsibleInput[]
    updateMany?: reportsUpdateManyWithWhereWithoutResponsibleInput | reportsUpdateManyWithWhereWithoutResponsibleInput[]
    deleteMany?: reportsScalarWhereInput | reportsScalarWhereInput[]
  }

  export type locationsCreateNestedOneWithoutCalendarEventsInput = {
    create?: XOR<locationsCreateWithoutCalendarEventsInput, locationsUncheckedCreateWithoutCalendarEventsInput>
    connectOrCreate?: locationsCreateOrConnectWithoutCalendarEventsInput
    connect?: locationsWhereUniqueInput
  }

  export type locationsUpdateOneRequiredWithoutCalendarEventsNestedInput = {
    create?: XOR<locationsCreateWithoutCalendarEventsInput, locationsUncheckedCreateWithoutCalendarEventsInput>
    connectOrCreate?: locationsCreateOrConnectWithoutCalendarEventsInput
    upsert?: locationsUpsertWithoutCalendarEventsInput
    connect?: locationsWhereUniqueInput
    update?: XOR<XOR<locationsUpdateToOneWithWhereWithoutCalendarEventsInput, locationsUpdateWithoutCalendarEventsInput>, locationsUncheckedUpdateWithoutCalendarEventsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumreports_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.reports_status | Enumreports_statusFieldRefInput<$PrismaModel>
    in?: $Enums.reports_status[]
    notIn?: $Enums.reports_status[]
    not?: NestedEnumreports_statusFilter<$PrismaModel> | $Enums.reports_status
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumreports_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reports_status | Enumreports_statusFieldRefInput<$PrismaModel>
    in?: $Enums.reports_status[]
    notIn?: $Enums.reports_status[]
    not?: NestedEnumreports_statusWithAggregatesFilter<$PrismaModel> | $Enums.reports_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumreports_statusFilter<$PrismaModel>
    _max?: NestedEnumreports_statusFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumusers_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel>
    in?: $Enums.users_role[]
    notIn?: $Enums.users_role[]
    not?: NestedEnumusers_roleFilter<$PrismaModel> | $Enums.users_role
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumusers_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel>
    in?: $Enums.users_role[]
    notIn?: $Enums.users_role[]
    not?: NestedEnumusers_roleWithAggregatesFilter<$PrismaModel> | $Enums.users_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumusers_roleFilter<$PrismaModel>
    _max?: NestedEnumusers_roleFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type usersCreateWithoutReportsInput = {
    email: string
    password: string
    firstname?: string | null
    lastname?: string | null
    phone?: string | null
    role?: $Enums.users_role
    created_at?: Date | string
    updated_at: Date | string
    resettoken?: string | null
    resettokenExpire?: Date | string | null
    location?: locationsCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutReportsInput = {
    id?: number
    email: string
    password: string
    firstname?: string | null
    lastname?: string | null
    phone?: string | null
    role?: $Enums.users_role
    location_id?: number | null
    created_at?: Date | string
    updated_at: Date | string
    resettoken?: string | null
    resettokenExpire?: Date | string | null
  }

  export type usersCreateOrConnectWithoutReportsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutReportsInput, usersUncheckedCreateWithoutReportsInput>
  }

  export type locationsCreateWithoutReportsInput = {
    name: string
    address: string
    created_at?: Date | string
    updated_at: Date | string
    calendarEvents?: calendar_eventsCreateNestedManyWithoutLocationInput
    users?: usersCreateNestedManyWithoutLocationInput
  }

  export type locationsUncheckedCreateWithoutReportsInput = {
    id?: number
    name: string
    address: string
    created_at?: Date | string
    updated_at: Date | string
    calendarEvents?: calendar_eventsUncheckedCreateNestedManyWithoutLocationInput
    users?: usersUncheckedCreateNestedManyWithoutLocationInput
  }

  export type locationsCreateOrConnectWithoutReportsInput = {
    where: locationsWhereUniqueInput
    create: XOR<locationsCreateWithoutReportsInput, locationsUncheckedCreateWithoutReportsInput>
  }

  export type responsiblesCreateWithoutReportsInput = {
    name: string
    email: string
    phone?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type responsiblesUncheckedCreateWithoutReportsInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type responsiblesCreateOrConnectWithoutReportsInput = {
    where: responsiblesWhereUniqueInput
    create: XOR<responsiblesCreateWithoutReportsInput, responsiblesUncheckedCreateWithoutReportsInput>
  }

  export type usersUpsertWithoutReportsInput = {
    update: XOR<usersUpdateWithoutReportsInput, usersUncheckedUpdateWithoutReportsInput>
    create: XOR<usersCreateWithoutReportsInput, usersUncheckedCreateWithoutReportsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutReportsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutReportsInput, usersUncheckedUpdateWithoutReportsInput>
  }

  export type usersUpdateWithoutReportsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resettoken?: NullableStringFieldUpdateOperationsInput | string | null
    resettokenExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: locationsUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    location_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resettoken?: NullableStringFieldUpdateOperationsInput | string | null
    resettokenExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type locationsUpsertWithoutReportsInput = {
    update: XOR<locationsUpdateWithoutReportsInput, locationsUncheckedUpdateWithoutReportsInput>
    create: XOR<locationsCreateWithoutReportsInput, locationsUncheckedCreateWithoutReportsInput>
    where?: locationsWhereInput
  }

  export type locationsUpdateToOneWithWhereWithoutReportsInput = {
    where?: locationsWhereInput
    data: XOR<locationsUpdateWithoutReportsInput, locationsUncheckedUpdateWithoutReportsInput>
  }

  export type locationsUpdateWithoutReportsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    calendarEvents?: calendar_eventsUpdateManyWithoutLocationNestedInput
    users?: usersUpdateManyWithoutLocationNestedInput
  }

  export type locationsUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    calendarEvents?: calendar_eventsUncheckedUpdateManyWithoutLocationNestedInput
    users?: usersUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type responsiblesUpsertWithoutReportsInput = {
    update: XOR<responsiblesUpdateWithoutReportsInput, responsiblesUncheckedUpdateWithoutReportsInput>
    create: XOR<responsiblesCreateWithoutReportsInput, responsiblesUncheckedCreateWithoutReportsInput>
    where?: responsiblesWhereInput
  }

  export type responsiblesUpdateToOneWithWhereWithoutReportsInput = {
    where?: responsiblesWhereInput
    data: XOR<responsiblesUpdateWithoutReportsInput, responsiblesUncheckedUpdateWithoutReportsInput>
  }

  export type responsiblesUpdateWithoutReportsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type responsiblesUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type locationsCreateWithoutUsersInput = {
    name: string
    address: string
    created_at?: Date | string
    updated_at: Date | string
    reports?: reportsCreateNestedManyWithoutLocationInput
    calendarEvents?: calendar_eventsCreateNestedManyWithoutLocationInput
  }

  export type locationsUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    address: string
    created_at?: Date | string
    updated_at: Date | string
    reports?: reportsUncheckedCreateNestedManyWithoutLocationInput
    calendarEvents?: calendar_eventsUncheckedCreateNestedManyWithoutLocationInput
  }

  export type locationsCreateOrConnectWithoutUsersInput = {
    where: locationsWhereUniqueInput
    create: XOR<locationsCreateWithoutUsersInput, locationsUncheckedCreateWithoutUsersInput>
  }

  export type reportsCreateWithoutUsersInput = {
    title: string
    description: string
    status?: $Enums.reports_status
    category?: string | null
    imageUrl?: string | null
    created_at?: Date | string
    updated_at: Date | string
    location?: locationsCreateNestedOneWithoutReportsInput
    responsible?: responsiblesCreateNestedOneWithoutReportsInput
  }

  export type reportsUncheckedCreateWithoutUsersInput = {
    id?: number
    location_id?: number | null
    responsible_id?: number | null
    title: string
    description: string
    status?: $Enums.reports_status
    category?: string | null
    imageUrl?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type reportsCreateOrConnectWithoutUsersInput = {
    where: reportsWhereUniqueInput
    create: XOR<reportsCreateWithoutUsersInput, reportsUncheckedCreateWithoutUsersInput>
  }

  export type reportsCreateManyUsersInputEnvelope = {
    data: reportsCreateManyUsersInput | reportsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type locationsUpsertWithoutUsersInput = {
    update: XOR<locationsUpdateWithoutUsersInput, locationsUncheckedUpdateWithoutUsersInput>
    create: XOR<locationsCreateWithoutUsersInput, locationsUncheckedCreateWithoutUsersInput>
    where?: locationsWhereInput
  }

  export type locationsUpdateToOneWithWhereWithoutUsersInput = {
    where?: locationsWhereInput
    data: XOR<locationsUpdateWithoutUsersInput, locationsUncheckedUpdateWithoutUsersInput>
  }

  export type locationsUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: reportsUpdateManyWithoutLocationNestedInput
    calendarEvents?: calendar_eventsUpdateManyWithoutLocationNestedInput
  }

  export type locationsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: reportsUncheckedUpdateManyWithoutLocationNestedInput
    calendarEvents?: calendar_eventsUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type reportsUpsertWithWhereUniqueWithoutUsersInput = {
    where: reportsWhereUniqueInput
    update: XOR<reportsUpdateWithoutUsersInput, reportsUncheckedUpdateWithoutUsersInput>
    create: XOR<reportsCreateWithoutUsersInput, reportsUncheckedCreateWithoutUsersInput>
  }

  export type reportsUpdateWithWhereUniqueWithoutUsersInput = {
    where: reportsWhereUniqueInput
    data: XOR<reportsUpdateWithoutUsersInput, reportsUncheckedUpdateWithoutUsersInput>
  }

  export type reportsUpdateManyWithWhereWithoutUsersInput = {
    where: reportsScalarWhereInput
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyWithoutUsersInput>
  }

  export type reportsScalarWhereInput = {
    AND?: reportsScalarWhereInput | reportsScalarWhereInput[]
    OR?: reportsScalarWhereInput[]
    NOT?: reportsScalarWhereInput | reportsScalarWhereInput[]
    id?: IntFilter<"reports"> | number
    user_id?: IntFilter<"reports"> | number
    location_id?: IntNullableFilter<"reports"> | number | null
    responsible_id?: IntNullableFilter<"reports"> | number | null
    title?: StringFilter<"reports"> | string
    description?: StringFilter<"reports"> | string
    status?: Enumreports_statusFilter<"reports"> | $Enums.reports_status
    category?: StringNullableFilter<"reports"> | string | null
    imageUrl?: StringNullableFilter<"reports"> | string | null
    created_at?: DateTimeFilter<"reports"> | Date | string
    updated_at?: DateTimeFilter<"reports"> | Date | string
  }

  export type reportsCreateWithoutLocationInput = {
    title: string
    description: string
    status?: $Enums.reports_status
    category?: string | null
    imageUrl?: string | null
    created_at?: Date | string
    updated_at: Date | string
    users: usersCreateNestedOneWithoutReportsInput
    responsible?: responsiblesCreateNestedOneWithoutReportsInput
  }

  export type reportsUncheckedCreateWithoutLocationInput = {
    id?: number
    user_id: number
    responsible_id?: number | null
    title: string
    description: string
    status?: $Enums.reports_status
    category?: string | null
    imageUrl?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type reportsCreateOrConnectWithoutLocationInput = {
    where: reportsWhereUniqueInput
    create: XOR<reportsCreateWithoutLocationInput, reportsUncheckedCreateWithoutLocationInput>
  }

  export type reportsCreateManyLocationInputEnvelope = {
    data: reportsCreateManyLocationInput | reportsCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type calendar_eventsCreateWithoutLocationInput = {
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    created_at?: Date | string
    updated_at: Date | string
  }

  export type calendar_eventsUncheckedCreateWithoutLocationInput = {
    id?: number
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    created_at?: Date | string
    updated_at: Date | string
  }

  export type calendar_eventsCreateOrConnectWithoutLocationInput = {
    where: calendar_eventsWhereUniqueInput
    create: XOR<calendar_eventsCreateWithoutLocationInput, calendar_eventsUncheckedCreateWithoutLocationInput>
  }

  export type calendar_eventsCreateManyLocationInputEnvelope = {
    data: calendar_eventsCreateManyLocationInput | calendar_eventsCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutLocationInput = {
    email: string
    password: string
    firstname?: string | null
    lastname?: string | null
    phone?: string | null
    role?: $Enums.users_role
    created_at?: Date | string
    updated_at: Date | string
    resettoken?: string | null
    resettokenExpire?: Date | string | null
    reports?: reportsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutLocationInput = {
    id?: number
    email: string
    password: string
    firstname?: string | null
    lastname?: string | null
    phone?: string | null
    role?: $Enums.users_role
    created_at?: Date | string
    updated_at: Date | string
    resettoken?: string | null
    resettokenExpire?: Date | string | null
    reports?: reportsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutLocationInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutLocationInput, usersUncheckedCreateWithoutLocationInput>
  }

  export type usersCreateManyLocationInputEnvelope = {
    data: usersCreateManyLocationInput | usersCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type reportsUpsertWithWhereUniqueWithoutLocationInput = {
    where: reportsWhereUniqueInput
    update: XOR<reportsUpdateWithoutLocationInput, reportsUncheckedUpdateWithoutLocationInput>
    create: XOR<reportsCreateWithoutLocationInput, reportsUncheckedCreateWithoutLocationInput>
  }

  export type reportsUpdateWithWhereUniqueWithoutLocationInput = {
    where: reportsWhereUniqueInput
    data: XOR<reportsUpdateWithoutLocationInput, reportsUncheckedUpdateWithoutLocationInput>
  }

  export type reportsUpdateManyWithWhereWithoutLocationInput = {
    where: reportsScalarWhereInput
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyWithoutLocationInput>
  }

  export type calendar_eventsUpsertWithWhereUniqueWithoutLocationInput = {
    where: calendar_eventsWhereUniqueInput
    update: XOR<calendar_eventsUpdateWithoutLocationInput, calendar_eventsUncheckedUpdateWithoutLocationInput>
    create: XOR<calendar_eventsCreateWithoutLocationInput, calendar_eventsUncheckedCreateWithoutLocationInput>
  }

  export type calendar_eventsUpdateWithWhereUniqueWithoutLocationInput = {
    where: calendar_eventsWhereUniqueInput
    data: XOR<calendar_eventsUpdateWithoutLocationInput, calendar_eventsUncheckedUpdateWithoutLocationInput>
  }

  export type calendar_eventsUpdateManyWithWhereWithoutLocationInput = {
    where: calendar_eventsScalarWhereInput
    data: XOR<calendar_eventsUpdateManyMutationInput, calendar_eventsUncheckedUpdateManyWithoutLocationInput>
  }

  export type calendar_eventsScalarWhereInput = {
    AND?: calendar_eventsScalarWhereInput | calendar_eventsScalarWhereInput[]
    OR?: calendar_eventsScalarWhereInput[]
    NOT?: calendar_eventsScalarWhereInput | calendar_eventsScalarWhereInput[]
    id?: IntFilter<"calendar_events"> | number
    title?: StringFilter<"calendar_events"> | string
    description?: StringNullableFilter<"calendar_events"> | string | null
    start_date?: DateTimeFilter<"calendar_events"> | Date | string
    end_date?: DateTimeFilter<"calendar_events"> | Date | string
    location_id?: IntFilter<"calendar_events"> | number
    created_at?: DateTimeFilter<"calendar_events"> | Date | string
    updated_at?: DateTimeFilter<"calendar_events"> | Date | string
  }

  export type usersUpsertWithWhereUniqueWithoutLocationInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutLocationInput, usersUncheckedUpdateWithoutLocationInput>
    create: XOR<usersCreateWithoutLocationInput, usersUncheckedCreateWithoutLocationInput>
  }

  export type usersUpdateWithWhereUniqueWithoutLocationInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutLocationInput, usersUncheckedUpdateWithoutLocationInput>
  }

  export type usersUpdateManyWithWhereWithoutLocationInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutLocationInput>
  }

  export type usersScalarWhereInput = {
    AND?: usersScalarWhereInput | usersScalarWhereInput[]
    OR?: usersScalarWhereInput[]
    NOT?: usersScalarWhereInput | usersScalarWhereInput[]
    id?: IntFilter<"users"> | number
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    firstname?: StringNullableFilter<"users"> | string | null
    lastname?: StringNullableFilter<"users"> | string | null
    phone?: StringNullableFilter<"users"> | string | null
    role?: Enumusers_roleFilter<"users"> | $Enums.users_role
    location_id?: IntNullableFilter<"users"> | number | null
    created_at?: DateTimeFilter<"users"> | Date | string
    updated_at?: DateTimeFilter<"users"> | Date | string
    resettoken?: StringNullableFilter<"users"> | string | null
    resettokenExpire?: DateTimeNullableFilter<"users"> | Date | string | null
  }

  export type reportsCreateWithoutResponsibleInput = {
    title: string
    description: string
    status?: $Enums.reports_status
    category?: string | null
    imageUrl?: string | null
    created_at?: Date | string
    updated_at: Date | string
    users: usersCreateNestedOneWithoutReportsInput
    location?: locationsCreateNestedOneWithoutReportsInput
  }

  export type reportsUncheckedCreateWithoutResponsibleInput = {
    id?: number
    user_id: number
    location_id?: number | null
    title: string
    description: string
    status?: $Enums.reports_status
    category?: string | null
    imageUrl?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type reportsCreateOrConnectWithoutResponsibleInput = {
    where: reportsWhereUniqueInput
    create: XOR<reportsCreateWithoutResponsibleInput, reportsUncheckedCreateWithoutResponsibleInput>
  }

  export type reportsCreateManyResponsibleInputEnvelope = {
    data: reportsCreateManyResponsibleInput | reportsCreateManyResponsibleInput[]
    skipDuplicates?: boolean
  }

  export type reportsUpsertWithWhereUniqueWithoutResponsibleInput = {
    where: reportsWhereUniqueInput
    update: XOR<reportsUpdateWithoutResponsibleInput, reportsUncheckedUpdateWithoutResponsibleInput>
    create: XOR<reportsCreateWithoutResponsibleInput, reportsUncheckedCreateWithoutResponsibleInput>
  }

  export type reportsUpdateWithWhereUniqueWithoutResponsibleInput = {
    where: reportsWhereUniqueInput
    data: XOR<reportsUpdateWithoutResponsibleInput, reportsUncheckedUpdateWithoutResponsibleInput>
  }

  export type reportsUpdateManyWithWhereWithoutResponsibleInput = {
    where: reportsScalarWhereInput
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyWithoutResponsibleInput>
  }

  export type locationsCreateWithoutCalendarEventsInput = {
    name: string
    address: string
    created_at?: Date | string
    updated_at: Date | string
    reports?: reportsCreateNestedManyWithoutLocationInput
    users?: usersCreateNestedManyWithoutLocationInput
  }

  export type locationsUncheckedCreateWithoutCalendarEventsInput = {
    id?: number
    name: string
    address: string
    created_at?: Date | string
    updated_at: Date | string
    reports?: reportsUncheckedCreateNestedManyWithoutLocationInput
    users?: usersUncheckedCreateNestedManyWithoutLocationInput
  }

  export type locationsCreateOrConnectWithoutCalendarEventsInput = {
    where: locationsWhereUniqueInput
    create: XOR<locationsCreateWithoutCalendarEventsInput, locationsUncheckedCreateWithoutCalendarEventsInput>
  }

  export type locationsUpsertWithoutCalendarEventsInput = {
    update: XOR<locationsUpdateWithoutCalendarEventsInput, locationsUncheckedUpdateWithoutCalendarEventsInput>
    create: XOR<locationsCreateWithoutCalendarEventsInput, locationsUncheckedCreateWithoutCalendarEventsInput>
    where?: locationsWhereInput
  }

  export type locationsUpdateToOneWithWhereWithoutCalendarEventsInput = {
    where?: locationsWhereInput
    data: XOR<locationsUpdateWithoutCalendarEventsInput, locationsUncheckedUpdateWithoutCalendarEventsInput>
  }

  export type locationsUpdateWithoutCalendarEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: reportsUpdateManyWithoutLocationNestedInput
    users?: usersUpdateManyWithoutLocationNestedInput
  }

  export type locationsUncheckedUpdateWithoutCalendarEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: reportsUncheckedUpdateManyWithoutLocationNestedInput
    users?: usersUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type reportsCreateManyUsersInput = {
    id?: number
    location_id?: number | null
    responsible_id?: number | null
    title: string
    description: string
    status?: $Enums.reports_status
    category?: string | null
    imageUrl?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type reportsUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: Enumreports_statusFieldUpdateOperationsInput | $Enums.reports_status
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: locationsUpdateOneWithoutReportsNestedInput
    responsible?: responsiblesUpdateOneWithoutReportsNestedInput
  }

  export type reportsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    location_id?: NullableIntFieldUpdateOperationsInput | number | null
    responsible_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: Enumreports_statusFieldUpdateOperationsInput | $Enums.reports_status
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    location_id?: NullableIntFieldUpdateOperationsInput | number | null
    responsible_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: Enumreports_statusFieldUpdateOperationsInput | $Enums.reports_status
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportsCreateManyLocationInput = {
    id?: number
    user_id: number
    responsible_id?: number | null
    title: string
    description: string
    status?: $Enums.reports_status
    category?: string | null
    imageUrl?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type calendar_eventsCreateManyLocationInput = {
    id?: number
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    created_at?: Date | string
    updated_at: Date | string
  }

  export type usersCreateManyLocationInput = {
    id?: number
    email: string
    password: string
    firstname?: string | null
    lastname?: string | null
    phone?: string | null
    role?: $Enums.users_role
    created_at?: Date | string
    updated_at: Date | string
    resettoken?: string | null
    resettokenExpire?: Date | string | null
  }

  export type reportsUpdateWithoutLocationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: Enumreports_statusFieldUpdateOperationsInput | $Enums.reports_status
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutReportsNestedInput
    responsible?: responsiblesUpdateOneWithoutReportsNestedInput
  }

  export type reportsUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    responsible_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: Enumreports_statusFieldUpdateOperationsInput | $Enums.reports_status
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportsUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    responsible_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: Enumreports_statusFieldUpdateOperationsInput | $Enums.reports_status
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type calendar_eventsUpdateWithoutLocationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type calendar_eventsUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type calendar_eventsUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUpdateWithoutLocationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resettoken?: NullableStringFieldUpdateOperationsInput | string | null
    resettokenExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reports?: reportsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resettoken?: NullableStringFieldUpdateOperationsInput | string | null
    resettokenExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reports?: reportsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resettoken?: NullableStringFieldUpdateOperationsInput | string | null
    resettokenExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsCreateManyResponsibleInput = {
    id?: number
    user_id: number
    location_id?: number | null
    title: string
    description: string
    status?: $Enums.reports_status
    category?: string | null
    imageUrl?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type reportsUpdateWithoutResponsibleInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: Enumreports_statusFieldUpdateOperationsInput | $Enums.reports_status
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutReportsNestedInput
    location?: locationsUpdateOneWithoutReportsNestedInput
  }

  export type reportsUncheckedUpdateWithoutResponsibleInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    location_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: Enumreports_statusFieldUpdateOperationsInput | $Enums.reports_status
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportsUncheckedUpdateManyWithoutResponsibleInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    location_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: Enumreports_statusFieldUpdateOperationsInput | $Enums.reports_status
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationsCountOutputTypeDefaultArgs instead
     */
    export type LocationsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResponsiblesCountOutputTypeDefaultArgs instead
     */
    export type ResponsiblesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResponsiblesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use reportsDefaultArgs instead
     */
    export type reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = reportsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use locationsDefaultArgs instead
     */
    export type locationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = locationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use responsiblesDefaultArgs instead
     */
    export type responsiblesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = responsiblesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use calendar_eventsDefaultArgs instead
     */
    export type calendar_eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = calendar_eventsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}