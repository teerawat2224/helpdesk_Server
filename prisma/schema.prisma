generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model reports {
  id             Int             @id @default(autoincrement())
  user_id        Int
  location_id    Int?
  responsible_id Int?
  title          String
  description    String          @db.Text
  status         reports_status  @default(PENDING)
  category       String?         // เพิ่มประเภทเคส
  imageUrl       String?         // เพิ่มฟิลด์สำหรับลิงก์รูปภาพ
  created_at     DateTime        @default(now()) @db.Timestamp(0)
  updated_at     DateTime        @db.Timestamp(0)
  
  users          users           @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "Reports_user_id_fkey")
  location       locations?      @relation(fields: [location_id], references: [id])
  responsible    responsibles?   @relation(fields: [responsible_id], references: [id])

  @@index([user_id], map: "Reports_user_id_fkey")
  @@index([location_id])
  @@index([responsible_id])
  @@index([status]) // เพิ่ม index สำหรับ status เพื่อเพิ่มประสิทธิภาพการค้นหา
  @@index([created_at]) // เพิ่ม index สำหรับวันที่สร้างเพื่อให้การค้นหาตามวันที่รวดเร็วขึ้น
}

model users {
  id              Int          @id @default(autoincrement())
  email           String       @unique
  password        String
  firstname       String?
  lastname        String?
  phone           String?
  role            users_role   @default(USER)
  location_id     Int?
  location        locations?   @relation(fields: [location_id], references: [id])
  created_at      DateTime     @default(now()) @db.Timestamp(0)
  updated_at      DateTime     @db.Timestamp(0)
  resettoken      String?
  resettokenExpire DateTime?
  reports         reports[]

  @@index([location_id])
}

enum reports_status {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum users_role {
  USER
  REPAIR_TECHNICIAN  
  LEAD_REPAIR_TECHNICIAN  
  IT  
  ADMIN  
}

model locations {
  id             Int           @id @default(autoincrement())
  name           String
  address        String
  created_at     DateTime      @default(now()) @db.Timestamp(0)
  updated_at     DateTime      @db.Timestamp(0)
  reports        reports[]     // Relation back to reports
  calendarEvents calendar_events[]
  users          users[]       // Relation back to users
}

model responsibles {
  id          Int         @id @default(autoincrement())
  name        String
  email       String      @unique
  phone       String?
  created_at  DateTime    @default(now()) @db.Timestamp(0)
  updated_at  DateTime    @db.Timestamp(0)
  reports     reports[]   // Relation back to reports
}

model calendar_events {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  start_date  DateTime
  end_date    DateTime
  location_id Int
  location    locations   @relation(fields: [location_id], references: [id])
  created_at  DateTime    @default(now()) @db.Timestamp(0)
  updated_at  DateTime    @db.Timestamp(0)
}
